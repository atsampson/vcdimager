AC_REVISION([$Id$])dnl
AC_INIT(libvcd/vcd.h)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(vcdimager, 0.7.10)
AM_MISSING_PROG(HELP2MAN, help2man, $missing_dir)
AM_MAINTAINER_MODE

AM_SANITY_CHECK
AC_CANONICAL_HOST
dnl A M _ACLOCAL_INCLUDE(frontends/gnome/macros)

AC_DEFINE_UNQUOTED(HOST_ARCH, "$host_os/$host_cpu", [host os/cpu identifier])

dnl conditionally built frontends

enable_gnome_fe=no

dnl AC_ARG_WITH(gnome-frontend,
dnl	[  --with-gnome-frontend   enable gnome frontend (not enabled by default)], 
dnl	enable_gnome_fe="${withval}", enable_gnome_fe=no)

AC_ARG_WITH(cli-frontend,
	[  --without-cli-frontend  enable cli frontend (enabled by default)], 
	enable_cli_fe="${withval}", enable_cli_fe=yes)

AC_ARG_WITH(xml-frontend,
	[  --without-xml-frontend  enable XML frontend (enabled by default)], 
	enable_xml_fe="${withval}", enable_xml_fe=yes)

dnl programs

AC_PROG_CC
if test "x$GCC" != "xyes" 
then
  echo "*** non GNU CC compiler detected."
  echo "*** This package has not been tested very well with non GNU compilers"
  echo "*** you should try to use 'gcc' for compiling this package."
fi

AC_PROG_CPP
if test "x$enable_gnome_fe" = "xyes"; then
 AC_PROG_CXX
fi
AM_PROG_CC_STDC
AM_PROG_LIBTOOL
AC_PROG_AWK

dnl libs
AC_CHECK_FUNCS(snprintf vsnprintf, , [AC_MSG_ERROR(required function not found)])

enable_cli_fe_popt=no

if test "x$enable_cli_fe" = "xyes"; then
 AC_CHECK_LIB(popt, poptGetContext, POPT_LIBS="-lpopt", enable_cli_fe_popt=yes)
fi


if test "x$enable_xml_fe" = "xyes"; then
  AM_PATH_XML2(2.3.8, , enable_xml_fe=no)
fi

dnl if test "x$enable_gnome_fe" = "xyes"; then
dnl gnome_avail=no
dnl GNOME_INIT_HOOK(gnome_avail=yes,,)
dnl enable_gnome_fe="${gnome_avail}" 
dnl fi

dnl if test "x$enable_gnome_fe" = "xyes"; then
dnl AM_PATH_LIBGLADE(, enable_gnome_fe=no, gnome)
dnl fi

dnl if test "x$enable_gnome_fe" = "xyes"; then
dnl AM_PATH_GNOMEMM(,, enable_gnome_fe=no)
dnl fi

dnl headers

AC_DEFINE(_DEVELOPMENT_, [], enable warnings about being development release)
AC_DEFINE(_GNU_SOURCE, [], enable GNU libc extension)
AC_STDC_HEADERS
AC_CHECK_HEADERS(stdint.h inttypes.h stdbool.h alloca.h)

if test "x$ac_cv_header_stdint_h" != "xyes" 
 then
   AC_CHECK_SIZEOF(int, 4)
   AC_CHECK_SIZEOF(long, 4)
   AC_CHECK_SIZEOF(long long, 8)
fi

if test "x$enable_cli_fe" = "xyes" \
	-a "x$enable_cli_fe_popt" != "xyes"
then
 AC_CHECK_HEADER(popt.h, , enable_cli_fe_popt=yes)
fi

if test "x$enable_cli_fe" = "xyes" \
	-a "x$enable_cli_fe_popt" != "xyes"
then
 AC_MSG_CHECKING([checking whether popt new enough])
 AC_EGREP_HEADER(poptHelpOptions, popt.h, , enable_cli_fe_popt=yes)

 if test "x$enable_cli_fe_popt" = "xyes"; then
  AC_MSG_RESULT([no])
 else
  AC_MSG_RESULT([seems so])
 fi
fi

dnl GNOME_COMPILE_WARNINGS

if test "x$enable_gnome_fe" = "xyes"; then
 GNOME_X_CHECKS
 dnl Subst PACKAGE_PIXMAPS_DIR.
 PACKAGE_PIXMAPS_DIR="`gnome-config --datadir`/pixmaps/${PACKAGE}"
 AC_SUBST(PACKAGE_PIXMAPS_DIR)
fi

dnl compiler
AC_C_BIGENDIAN
AC_C_CONST
AC_C_INLINE

dnl empty_array_size
AC_MSG_CHECKING([how to create empty arrays])

empty_array_size="xxx"
AC_TRY_COMPILE(,[struct { int foo; int bar[0]; } doo;], empty_array_size="0")

if test "x$empty_array_size" = "xxxx";then
 AC_TRY_COMPILE(,[struct { int foo; int bar[]; } doo;], empty_array_size="")
fi

if test "x$empty_array_size" = "xxxx"
then
  AC_MSG_ERROR([compiler is unable to creaty empty arrays])
else
  AC_DEFINE_UNQUOTED(EMPTY_ARRAY_SIZE, $empty_array_size, 
	[what to put between the brackets for empty arrays])
  changequote(`,')
  msg="[${empty_array_size}]"
  changequote([,])
  AC_MSG_RESULT($msg)
fi
dnl empty_array_size

dnl bitfield order
AC_MSG_CHECKING(bitfield ordering in structs)
AC_TRY_RUN([ int main() {
  struct { char bit_0:1, bit_12:2, bit_345:3, bit_67:2; } bf = { 1,1,1,1 };
  if (sizeof (bf) != 1) return 1;
  return *((unsigned char*) &bf) != 0x4b; }
], bf_lsbf=1, AC_TRY_RUN([ int main() {
  struct { char bit_0:1, bit_12:2, bit_345:3, bit_67:2; } bf = { 1,1,1,1 };
  if (sizeof (bf) != 1) return 1;
  return *((unsigned char*) &bf) != 0xa5; }
], bf_lsbf=0, AC_MSG_ERROR([unsupported bitfield ordering])))
if test "x$bf_lsbf" = "x1"; then
 AC_MSG_RESULT(LSBF)
 AC_DEFINE(BITFIELD_LSBF, [], [compiler does lsbf in struct bitfields])
else
 AC_MSG_RESULT(MSBF)
fi
dnl

dnl system
AC_CYGWIN

if test "x$GCC" = "xyes"
then
 WARN_CFLAGS="-Wall -Wmissing-prototypes -Wunused -Wpointer-arith -Wwrite-strings"
fi
LIBS="$LIBS -lm"
CFLAGS="$CFLAGS $WARN_CFLAGS"

AM_CONDITIONAL(CYGWIN, test "x$CYGWIN" = "xyes")
AM_CONDITIONAL(BUILD_CLI_FE_POPT, test "x$enable_cli_fe_popt" = "xyes")
AM_CONDITIONAL(BUILD_CLI_FE, test "x$enable_cli_fe" = "xyes")
AM_CONDITIONAL(BUILD_GNOME_FE, test "x$enable_gnome_fe" = "xyes")
AM_CONDITIONAL(BUILD_XML_FE, test "x$enable_xml_fe" = "xyes")

AC_SUBST(POPT_LIBS)

LIBVCD_CFLAGS='-I$(top_srcdir)/libvcd/'
LIBVCD_LIBS='$(top_builddir)/libvcd/libvcd.a'
AC_SUBST(LIBVCD_CFLAGS)
AC_SUBST(LIBVCD_LIBS)

AC_OUTPUT([ \
	Makefile \
	libvcd/Makefile \
	frontends/Makefile \
	frontends/xml/Makefile \
	frontends/cli/Makefile \
	frontends/cli/popt/Makefile \
	docs/Makefile \
	tests/Makefile \
	vcdimager.spec \
])

dnl	frontends/gnome/Makefile \
dnl	frontends/gnome/macros/Makefile \
dnl	frontends/gnome/src/Makefile \

echo "
Setup:
  Install path:     ${prefix}
  Build CLI FE:	    $enable_cli_fe
  Use own popt lib: $enable_cli_fe_popt
  Build XML FE:	    $enable_xml_fe
  Build Gnome FE:   $enable_gnome_fe
"

if test "x$enable_gnome_fe" = "xyes"
then
  cat <<EOM
****************************************************************************
****************************************************************************
***                                                                      ***
***       WARNING: THE GNOME FRONTEND IS NOT USABLE YET                  ***
***                                                                      ***
****************************************************************************
****************************************************************************
EOM
fi

if test "x$enable_cli_fe" != "xyes" \
 	-a "x$enable_xml_fe" != "xyes" \
 	-a "x$enable_gnome_fe" != "xyes"
then
  cat <<EOF
****************************************************************************
****************************************************************************
***                                                                      ***
***         WARNING: BUILDING ONLY LIBVCD W/O ANY FRONTENDS              ***
***              (maybe you are missing some library?)                   ***
***                                                                      ***
****************************************************************************
****************************************************************************
EOF
fi

dnl EOF
