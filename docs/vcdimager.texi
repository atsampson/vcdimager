\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename vcdimager.info
@settitle The GNU Video CD Image Maker
@setchapternewpage on
@c %**end of header

@afourpaper

@include version.texi

@ifinfo
This file documents GNU VCDImager, The GNU Video CD Authoring Tools.

Copyright (C) Herbert Valerio Riedel @email{hvr@@gnu.org}

@sp 2
Permission is granted to make and distributed verbatim copies of this
manual, provided the copyright notice and this permission notice are
preserved on all copies. 

@ignore
Permission is granted to process this file through TeX and print the 
results, provided the printed document carries copying permission notice 
identical to this one except for the removal of this paragraph (this 
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by Herbert Valerio Riedel.
@end ifinfo

@titlepage
@title GNU VCDImager
@subtitle $Id$
@subtitle The GNU Video CD Authoring Tools.
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Herbert Valerio Riedel

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001 Herbert Valerio Riedel @email{<hvr@@gnu.org>}
@sp 1
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``GNU General Public License'' are included exactly as
in the original, and provided that the entire resulting derived work is
distributed under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the sections entitled ``GNU General Public License'' may be
included in a translation approved by the Free Software Foundation
instead of in the original English.
@end titlepage

@c @summarycontents
@contents

@dircategory Miscellaneous
@direntry
* GNU VCDImager: (vcdimager).  The GNU Video CD Authoring Tools
@end direntry

@node Top, Introduction, (dir), (dir)

@menu
* Introduction::                
* Video CD Concepts::           
* Reference::                   
* VideoCD @acronym{XML} Description::  
* Examples::                    
* Tips and Hints::              
* Acronym Expansions::          
* GNU GENERAL PUBLIC LICENSE::  

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Supplied Tools::              
* Features::                    

Video CD Concepts

* Overview::                    
* Anatomy of Video CDs::        
* Known Video CD Flavors::      
* Constraints on @acronym{MPEG} streams::  

Known Video CD Flavors

* Video CD 1.1::                
* Video CD 2.0::                
* Extended Video CD::           
* Super Video CD 1.0::          
* Extended Super Video CD::     

Constraints on @acronym{MPEG} streams

* Video CD::                    
* Super Video CD::              
* Common Constraints::          

Common Constraints

* Alignment::                   
* Access Point Sectors::        

Reference

* Tools::                       

Tools

* @file{vcdimager}::            
* @file{vcddebug}::             
* @file{vcdxgen}::              
* @file{vcdxbuild}::            
* @file{vcdxrip}::              

@file{vcdimager}

* Adding Files to the Video CD ::  
* CD-i Support::                

VideoCD @acronym{XML} Description

* @code{<videocd>} Root::       

@code{<videocd>} Root

* @code{<option>} Element::     
* @code{<info>} Container::     
* @code{<pvd>} Container::      
* @code{<filesystem>} Container::  
* @code{<segment-items>} Container::  
* @code{<sequence-items>} Container::  
* @code{<pbc>} Container::      

@code{<filesystem>} Container

* @code{<folder>} Element/Containter::  
* @code{<file>} Element/Containter::  

@code{<segment-items>} Container

* @code{<segment-item>} Element::  

@code{<sequence-items>} Container

* @code{<sequence-item>} Element::  

@code{<pbc>} Container

* @code{<selection>} Element::  
* @code{<playlist>} Element::   
* @code{<endlist>} Element::    

Examples

* Simple Multitrack Example::   
* @acronym{MPEG} Extraction::   

Tips and Hints

* SVCD Player Compatibility::   

@end detailmenu
@end menu

@node Introduction, Video CD Concepts, Top, Top
@chapter Introduction

This manual describes the @dfn{GNU VCDImager}@footnote{see
@url{http://www.gnu.org/software/vcdimager/}} package, a toolset for
operating on (Super) Video CD disc images.

@menu
* Supplied Tools::              
* Features::                    
@end menu

@node Supplied Tools, Features, Introduction, Introduction
@section Supplied Tools

The following commandline tools are provided with this package:

@table @code
@item vcdimager
Simple frontend, allowing for easy commandline controlled generation of
basic @acronym{VCD} and @acronym{SVCD} disc images without an
intermediate @acronym{XML} description.

@item vcddebug
Analysation tool and report generator for @acronym{VCD} and
@acronym{SVCD} discs.

@item vcdxgen
@acronym{XML} @acronym{VCD}-description generator, with commandline
interface similiar to the classic @code{vcdimager} frontend.

@item vcdxbuild
Builds a @acronym{VCD}/@acronym{SVCD} according to a supplied
@acronym{XML} description and files containing the @acronym{MPEG}
program streams referred to in the @acronym{XML} description.

@item vcdxrip
Disassembles a given @acronym{VCD} or @acronym{SVCD} disc into a
@acronym{XML} description and the contained @acronym{MPEG} program
streams.

@end table

The generated @acronym{CD-ROM} images created are suitable for being
burnt on to @acronym{CD-R}, by the use of a CD-recording program which
recognizes the @acronym{BIN/CUE}-format, such as cdrdao@footnote{see
@url{http://www.ping.de/sites/daneb/cdrdao.html}}, for instance.

@node Features,  , Supplied Tools, Introduction
@section Features

Features of the backend library@footnote{the core of the GNU VCDImager
package consists of a library named @code{libvcd}, the frontends are
just user interfaces to the exported C-API}, on which all frontends
rely, include:

@itemize @bullet
@item
Video CD 1.1 image output support.

@item
Video CD 2.0 image output support.

@item
Super Video CD 1.0@footnote{based on the @acronym{IEC}62107
specification with some extensions defined in the socalled `4C SVCD
System Specification 1.0'. Some support for the @emph{deprecated}
Chinese SVCD format is available through switches.} image output
support.

@item 
Full @acronym{PBC} support, including customizable play lists, selection
lists and end lists.

@item
Support for segment (play) items (@acronym{SPI}).

@item
Support for up to 98 sequence items (@acronym{MPEG} tracks) per (Super) Video CD.

@item
Support for additonal entry points into sequence items.

@item
Support for defining auto pause points in sequence items.

@item
General facility for adding files as mode 2 form 1 and 2 sectors to the
@acronym{ISO9660} filesystem and setting some labels in the
@acronym{ISO9660} @acronym{PVD}

@item
Supports 99 minute @acronym{CD-R} media@footnote{...though most devices
will have problems with such an out-of-specification media. You may want
use the @option{--sector-2336} option for images longer than 80
minutes}.

@item 
Image input support for GNU/Linux ioctl()-based cdrom devices,
@acronym{BIN/CUE} images and @acronym{NRG} images.

@end itemize

@node Video CD Concepts, Reference, Introduction, Top
@chapter Video CD Concepts

This chapter gives some background information regarding the underlying
Video CD technology.

@strong{Warning:} All information this chapter is presented without
any warranty of accuracy or correctness. You are encouraged to send
corrections and improvements for this manual to
@email{bug-vcdimager@@gnu.org}.

@menu
* Overview::                    
* Anatomy of Video CDs::        
* Known Video CD Flavors::      
* Constraints on @acronym{MPEG} streams::  
@end menu

@node Overview, Anatomy of Video CDs, Video CD Concepts, Video CD Concepts
@section Overview

The Video Compact Disc (@dfn{Video CD} or @dfn{VCD}) is a standardized
digital video storage format. It is based on the commonly available
Compact Disc technology, which allows for low cost video authoring.
Video CDs can be played in most @acronym{DVD} standalone player,
dedicated VCD players and finally, modern Personal Computers with
multimedia support.

@node Anatomy of Video CDs, Known Video CD Flavors, Overview, Video CD Concepts
@section Anatomy of Video CDs

In general, the layout of a Video CD is as follows:

@itemize @bullet
@item
ISO9660 data track.

@itemize @bullet 
@item 
ISO9660 structure at @code{00:02:00} consisting of 16 empty sectors,
primary volume descriptor (@dfn{PVD}) and directory records with file
pointers to information area structures (described below) and external
pointers to @acronym{MPEG}/@acronym{CD-DA} tracks following the
ISO9660 data track.

@item
Karaoke area at @code{00:03:00}.

@item
Video CD information area at @code{00:04:00}.

@item
Optional segment play item area with @acronym{MPEG} items aligned in 150
sector segments.

@item
Optional program and data file area, for additional files added to the
ISO9660 track.

@end itemize

@item
Up to 98 @acronym{MPEG} mode 2 form 2 or @acronym{CD-DA} tracks
embedded in lead-in and lead-out empty sectors.

@end itemize

@node Known Video CD Flavors, Constraints on @acronym{MPEG} streams, Anatomy of Video CDs, Video CD Concepts
@section Known Video CD Flavors

There are different Video CD flavours commonly used. The following
sections tries to explain the differences amongst them.

@menu
* Video CD 1.1::                
* Video CD 2.0::                
* Extended Video CD::           
* Super Video CD 1.0::          
* Extended Super Video CD::     
@end menu

@node Video CD 1.1, Video CD 2.0, Known Video CD Flavors, Known Video CD Flavors
@subsection Video CD 1.1

This is the most basic Video CD specification dating back to
1993@footnote{actually this flavour was based on the Karaoke-CD, which
was the first @acronym{MPEG} based @acronym{CD-ROM} format.}, which has
the following characteristics:

@itemize @bullet
@item
One mode 2 mixed form ISO9660 track containing file pointers to the
information areas.

@item
Up to 98 multiplexed @acronym{MPEG}-1 audio/video streams or
@acronym{CD-DA} audio tracks.

@item
Up to 500 @acronym{MPEG} track entry points.

@end itemize

The Video CD specification requires the multiplexed @acronym{MPEG}-1
stream to have a @acronym{CBR} of about 174300 bytes per
second@footnote{2324 bytes of payload per sector * 75 sectors per
second = 174300 bytes per second} in order to accommodate single speed
@acronym{CD-ROM} drives. This allows one of the following two
resolutions:

@itemize @bullet
@item
352 x 240 @@ 29.97 Hz (@acronym{NTSC}).
@item
352 x 240 @@ 23.976 Hz (@acronym{FILM}).
@end itemize

The @acronym{CBR} @acronym{MPEG}-1, layer II audio stream is fixed at
224kbps with 1 stereo or 2 mono channels.

@node Video CD 2.0, Extended Video CD, Video CD 1.1, Known Video CD Flavors
@subsection Video CD 2.0

About two years after the Video CD 1.1 specification came out, an
improved Video CD 2.0 standard was published. This one added the
following items to the features already available in the 1.1
specification:

@itemize @bullet
@item
Support for (optional) @acronym{MPEG} segment play items (@dfn{SPI}),
consisting of still pictures, motion pictures or audio streams was
added.

@item
Support for (optional) interactive playback control (@dfn{PBC}) was
added.

@item
Support for (optional) playing related access by providing a scan point
index file was added. (@file{/EXT/SCANDATA.DAT})

@end itemize

@noindent
By adding PAL support to the Video CD 1.1 specification, the following
resolutions became available:
@itemize @bullet
@item
352 x 240 @@ 29.97 Hz (@acronym{NTSC}).
@item
352 x 240 @@ 23.976 Hz (@acronym{FILM}).
@item
352 x 288 @@ 25 Hz (@acronym{PAL}).
@end itemize

@node Extended Video CD, Super Video CD 1.0, Video CD 2.0, Known Video CD Flavors
@subsection Extended Video CD

Also known as @dfn{XVCD}, this is not an official standard. It's
actually just a name for VCDs which do not conform with the official
standards in order to use the additional performance of the
@acronym{DVD} decoders and thus achieve better image quality. Such an
XVCD may be unsupported by many available standalone playing devices.

@node Super Video CD 1.0, Extended Super Video CD, Extended Video CD, Known Video CD Flavors
@subsection Super Video CD 1.0

With the upcoming of the @acronym{DVD} media, a new VCD standard had to
be published in order to be able to keep up with technology, so the
Super Video CD specification was called into life. Most notably a switch
from @acronym{MPEG}-1 CBR to @acronym{MPEG}-2 VBR encoding for the video
stream was performed. The following new features are based upon the Video 
CD specification.

@itemize @bullet 
@item 
Use of @acronym{MPEG}-2 encoding instead of @acronym{MPEG}-1 for the
video stream.

@item
Allowed VBR encoding of @acronym{MPEG}-1 audio stream.

@item
Higher resolutions (see below) for video stream resolution.

@item
Overlay graphics and text (@dfn{OGT}) sub-channel coding for user
switchable subtitle displaying.
@end itemize

@noindent
For the Super Video CD, only the following two resolutions are supported
for motion pictures:

@itemize @bullet
@item
480 x 480 @@ 29.97 Hz (@acronym{NTSC}).
@item
480 x 576 @@ 25 Hz (@acronym{PAL}).
@end itemize

@node Extended Super Video CD,  , Super Video CD 1.0, Known Video CD Flavors
@subsection Extended Super Video CD

Just like the XVCD, and thus also known as @dfn{XSVCD}, this is not an
official standard and may not work with all playing devices supporting
SVCDs.

@section The ISO9660 Track

@subsection Primary Volume Descriptor

@subsection Directory Structure

@subsubsection @file{/VCD} & @file{/SVCD} Directory

@subsubsection @file{/MPEGAV} & @file{/MPEG2} Directory

@subsubsection @file{/CDDA} Directory

@subsubsection @file{/SEGMENT} Directory

@subsubsection @file{/EXT} Directory

@subsubsection @file{/CDI} Directory

@node Constraints on @acronym{MPEG} streams,  , Known Video CD Flavors, Video CD Concepts
@section Constraints on @acronym{MPEG} streams

GNU VCDImager expects @acronym{MPEG} streams in a format suitable for
(Super) Video CD production. Only a few cases where the @acronym{MPEG}
streams fail to adhere to this requirement are detected, thus it's up to
the user to ensure that the constraints are fullfilled.

@menu
* Video CD::                    
* Super Video CD::              
* Common Constraints::          
@end menu

@node Video CD, Super Video CD, Constraints on @acronym{MPEG} streams, Constraints on @acronym{MPEG} streams
@subsection Video CD

The Video CD specification requires the multiplexed @acronym{MPEG}-1
stream to have a bit rate of about 174300 bytes per second. The video
stream is required to have one of the following resolutions:

@itemize @bullet
@item
352 x 240 @@ 29.97 Hz (@acronym{NTSC}).
@item
352 x 240 @@ 23.976 Hz (@acronym{FILM}).
@item
352 x 288 @@ 25 Hz (@acronym{PAL}) (not supported on VCD 1.x!).
@end itemize

The audio stream must be @acronym{MPEG}-1 layer II, fixed to a 224
kbits/sec @acronym{CBR} with 1 stereo or 2 mono audio channels.

@node Super Video CD, Common Constraints, Video CD, Constraints on @acronym{MPEG} streams
@subsection Super Video CD

When creating Super Video CD images @acronym{MPEG}-2 @acronym{VBR}
streams are expected with a maximum allowed bit-rate of approximately
2.6 mbits/sec.  The following video resolutions are (officially)
supported@footnote{actually you can try other resoulutions as well,
but then you are leaving the SVCD specification behind you...}:

@itemize @bullet
@item
480 x 480 @@ 29.97 Hz (@acronym{NTSC}).
@item
480 x 576 @@ 25 Hz (@acronym{PAL}).
@end itemize

There are a few other requirements imposed by the specification, like the
need to encode scan information as user data in the picture layer of all
intra coded pictures.

The audio stream must be @acronym{MPEG}-1 layer II, with a bit-rate
ranging from 32 to 384 kbps kbits/sec bit-rate with up to 2 stereo or 4
mono channels, or 1 extended @acronym{MPEG}-1/2 multichannel (5+1)
surround sound stream.

@node Common Constraints,  , Super Video CD, Constraints on @acronym{MPEG} streams
@subsection Common Constraints

@menu
* Alignment::                   
* Access Point Sectors::        
@end menu

@node Alignment, Access Point Sectors, Common Constraints, Common Constraints
@subsubsection Alignment

The @acronym{MPEG} program streams should be aligned to 2324
byte @acronym{MPEG} packet boundaries@footnote{i.e. pack headers must be
repeated every 2324 bytes, starting on byte 0}. If they pack headers
should happen not be aligned on 2324 byte boundaries, GNU VCDImager will
try@footnote{aligning only works, if @acronym{MPEG} packets are
@emph{not} bigger than 2324 bytes.} to align them on the fly while
issuing a warning that padding was needed. @strong{Warning:} Padding the
@acronym{MPEG} streams causes the bitrate at which the data is read to
be increased, this may lead to undesiderable effects.

If the image generation process should abort with an @acronym{MPEG}
related error message, it maybe either due to a bug or due to a
corrupted or non-compliant @acronym{MPEG} stream coding. In this case
re-encoding or re-multiplexing may help.

@node Access Point Sectors,  , Alignment, Common Constraints
@subsubsection Access Point Sectors

An @dfn{Access Point Sector}, @acronym{APS}, is an @acronym{MPEG} video
sector on the @acronym{VCD}/@acronym{SVCD} which is suitable to be
jumped to directly. @acronym{APS} are required for entry points and
scantables.

@acronym{APS} have to fullfill the requirement to precede every I
picture by a GOP header which shall be preceded by a sequence header in
its turn and begin all in the same packet, thus forming a so called
access point sector. 

This requirement can be relaxed by enabling the @code{relaxed aps}
option. @strong{Warning:} The sequence header is needed for a playing
device to figure out display parameters, such as display resoulution and
frame rate, relaxing the aps requirement may lead to non-working entry
points.

@node Reference, VideoCD @acronym{XML} Description, Video CD Concepts, Top
@chapter Reference

@menu
* Tools::                       
@end menu

@node Tools,  , Reference, Reference
@section Tools

@menu
* @file{vcdimager}::            
* @file{vcddebug}::             
* @file{vcdxgen}::              
* @file{vcdxbuild}::            
* @file{vcdxrip}::              
@end menu

@node @file{vcdimager}, @file{vcddebug}, Tools, Tools
@subsection @file{vcdimager}

There are a few command-line options for @file{vcdimager} at the moment:
@example
@cartouche
$ vcdimager --help
@end cartouche
@end example

@menu
* Adding Files to the Video CD ::  
* CD-i Support::                
@end menu

@node Adding Files to the Video CD , CD-i Support, @file{vcdimager}, @file{vcdimager}
@subsubsection Adding Files to the Video CD 

Files can be added to the @acronym{ISO} file-system, that is the first
track of the Video CD, by making use of the command-line options
@option{--add-file=@var{FILE},@var{ISO_FILENAME}} and
@option{--add-file-2336=@var{FILE},@var{ISO_FILENAME}}.
The latter option allows you to include files containing the complete
user data of mode 2 CD-ROM sectors @footnote{8 bytes for subheader,
2324 bytes payload and finally 4 bytes for @acronym{EDC}}.

The path name given as @var{ISO_FILENAME} determines where to link the
file in the file-system of the Video CD. The given path name must be a
valid ISO9660 file name with the following restrictions:
@itemize @bullet
@item
The Character set is restricted to upper case letters, numbers, 
underscore @samp{_}, dot @samp{.} and slash @samp{/}.

@item
The maximum file name length is restricted to 31 characters, the
directory nesting level is restricted to 8 and the maximum path length
is limited to 255 characters.

@item
File names must contain exactly one dot.@footnote{if no file name
extension is supposed to exist the dot must be placed as a trailing
dot.}

@item
The path-name must not begin or end with a slash nor should it contain
slashes following directly each other.

@end itemize

If the parent directory for a file entry does not exist it will be
created automatically on demand.

@node CD-i Support,  , Adding Files to the Video CD , @file{vcdimager}
@subsubsection CD-i Support
There is no specific CD-i support in GNU VCDImager. But you
can use the general facilities for adding a custom CD-i player
application. 

If you happen to have a CD-i application consisting of the files
@file{cdi_imag.rtf}, @file{cdi_text.fnt}, @file{cdi_vcd.app} and
@file{cdi_vcd.cfg}, with @file{cdi_vcd.app} being the main application
executable, you could add the following lines to your @file{~/.popt}
popt@footnote{see documentation for popt for more information about
option aliasing} aliasing file@footnote{add it to @file{/etc/popt} if
the setting should be available system-wide}

@example
vcdimager alias --cdi \
	--iso-application-id "CDI/CDI_VCD.APP;1" \
	--add-file-2336 /usr/share/cdi/cdi_imag.rtf,CDI/CDI_IMAG.RTF \
	--add-file      /usr/share/cdi/cdi_text.fnt,CDI/CDI_TEXT.FNT \
	--add-file      /usr/share/cdi/cdi_vcd.app,CDI/CDI_VCD.APP \
	--add-file      /usr/share/cdi/cdi_vcd.cfg,CDI/CDI_VCD.CFG 
@end example

@node @file{vcddebug}, @file{vcdxgen}, @file{vcdimager}, Tools
@subsection @file{vcddebug}

@emph{...not written yet...}

@node @file{vcdxgen}, @file{vcdxbuild}, @file{vcddebug}, Tools
@subsection @file{vcdxgen}

@emph{...not written yet...}

@node @file{vcdxbuild}, @file{vcdxrip}, @file{vcdxgen}, Tools
@subsection @file{vcdxbuild}

@emph{...not written yet...}

@node @file{vcdxrip},  , @file{vcdxbuild}, Tools
@subsection @file{vcdxrip}

@emph{...not written yet...}

@node VideoCD @acronym{XML} Description, Examples, Reference, Top
@chapter VideoCD @acronym{XML} Description

The @acronym{DTD} the @acronym{XML} description conforms to,, can be
downloaded from @url{http://www.gnu.org/software/vcdimager/videocd.dtd}.

@menu
* @code{<videocd>} Root::       
@end menu

@node @code{<videocd>} Root,  , VideoCD @acronym{XML} Description, VideoCD @acronym{XML} Description
@section @code{<videocd>} Root

@menu
* @code{<option>} Element::     
* @code{<info>} Container::     
* @code{<pvd>} Container::      
* @code{<filesystem>} Container::  
* @code{<segment-items>} Container::  
* @code{<sequence-items>} Container::  
* @code{<pbc>} Container::      
@end menu

@example
<!ELEMENT videocd                       (option*,
                                         info,
                                         pvd,
                                         filesystem?,
                                         segment-items?,
                                         sequence-items,
                                         pbc?)>
<!ATTLIST videocd
  class        CDATA  #REQUIRED
  version      CDATA  #REQUIRED
  xmlns        %URI;  #FIXED 'http://www.gnu.org/software/vcdimager/1.0/'
>

<!ENTITY % URI "CDATA">
@end example

Supported combinations of @var{class} and @var{version} are listed below:

@multitable @columnfractions .10 .10 .80
@item @var{class} @tab @var{version} @tab Description
@item @samp{vcd}  @tab @samp{1.1}
@tab VideoCD 1.1
@item @samp{vcd}  @tab @samp{2.0}
@tab VideoCD 2.0
@item @samp{svcd}  @tab @samp{1.0}
@tab SuperVideoCD 1.0 (IEC-62107)
@end multitable

@node @code{<option>} Element, @code{<info>} Container, @code{<videocd>} Root, @code{<videocd>} Root
@subsection @code{<option>} Element

@example
<!ELEMENT option                        EMPTY>
<!ATTLIST option 
  name         CDATA  #REQUIRED
  value        CDATA  #IMPLIED
>
@end example

The following option @var{name} are recognized.  At the moment only
@samp{true} or @samp{false} is recognized as @var{value}.

@table @samp
@item svcd vcd30 mpegav
Rename @file{/MPEG2} folder on @acronym{SVCD}s to (non-compliant)
@file{/MPEGAV}.  Default: @samp{false}.

@item svcd vcd30 entrysvd
Enables the use of the (deprecated) signature @samp{ENTRYSVD} instead of
@samp{ENTRYVCD} for the file @file{/SVCD/ENTRY.SVD}. Default:
@samp{false}.

@item relaxed aps
This controls whether @acronym{APS} constraints are strict or
relaxed. Default: @samp{false}.

@end table

@node @code{<info>} Container, @code{<pvd>} Container, @code{<option>} Element, @code{<videocd>} Root
@subsection @code{<info>} Container

@example
<!ELEMENT info                          (album-id?,
                                         volume-count?,
                                         volume-number?,
                                         next-volume-use-sequence2?,
                                         next-volume-use-lid2?,
                                         restriction?,
                                         time-offset?)>

<!ELEMENT album-id                      (#PCDATA)>
<!ELEMENT volume-count                  (#PCDATA)>
<!ELEMENT volume-number                 (#PCDATA)>
<!ELEMENT restriction                   (#PCDATA)>
<!ELEMENT time-offset                   (#PCDATA)>
<!ELEMENT next-volume-use-sequence2     EMPTY>
<!ELEMENT next-volume-use-lid2          EMPTY>
@end example

@node @code{<pvd>} Container, @code{<filesystem>} Container, @code{<info>} Container, @code{<videocd>} Root
@subsection @code{<pvd>} Container

@example
<!ELEMENT pvd                           (volume-id?,
                                         system-id?,
                                         application-id?,
                                         preparer-id?,
                                         publisher-id?)>

<!ELEMENT volume-id                     (#PCDATA)>
<!ELEMENT system-id                     (#PCDATA)>
<!ELEMENT application-id                (#PCDATA)>
<!ELEMENT preparer-id                   (#PCDATA)>
<!ELEMENT publisher-id                  (#PCDATA)>
@end example

@node @code{<filesystem>} Container, @code{<segment-items>} Container, @code{<pvd>} Container, @code{<videocd>} Root
@subsection @code{<filesystem>} Container

@menu
* @code{<folder>} Element/Containter::  
* @code{<file>} Element/Containter::  
@end menu

@example
<!ELEMENT filesystem                    (folder*,
                                         file*)>
@end example

@node @code{<folder>} Element/Containter, @code{<file>} Element/Containter, @code{<filesystem>} Container, @code{<filesystem>} Container
@subsubsection @code{<folder>} Element/Containter

@example
<!ELEMENT folder                        (name,
                                         folder*,
                                         file*)>

<!ELEMENT name                          (#PCDATA)>
@end example

@node @code{<file>} Element/Containter,  , @code{<folder>} Element/Containter, @code{<filesystem>} Container
@subsubsection @code{<file>} Element

@example
<!ELEMENT file                          (name)>
<!ATTLIST file 
  src          %URI;  #REQUIRED
  format       (form1|mixed) "form1"
>
<!ELEMENT name                          (#PCDATA)>
@end example

@node @code{<segment-items>} Container, @code{<sequence-items>} Container, @code{<filesystem>} Container, @code{<videocd>} Root
@subsection @code{<segment-items>} Container

@menu
* @code{<segment-item>} Element::  
@end menu

@example
<!ELEMENT segment-items                 (segment-item)+>
@end example

@node @code{<segment-item>} Element,  , @code{<segment-items>} Container, @code{<segment-items>} Container
@subsubsection @code{<segment-item>} Element

@example
<!ELEMENT segment-item                  EMPTY>
<!ATTLIST segment-item 
  id           ID     #REQUIRED
  src          %URI;  #REQUIRED
>
@end example

@node @code{<sequence-items>} Container, @code{<pbc>} Container, @code{<segment-items>} Container, @code{<videocd>} Root
@subsection @code{<sequence-items>} Container

@menu
* @code{<sequence-item>} Element::  
@end menu

@example
<!ELEMENT sequence-items                (sequence-item)+>
@end example

@node @code{<sequence-item>} Element,  , @code{<sequence-items>} Container, @code{<sequence-items>} Container
@subsubsection @code{<sequence-item>} Element

@example
<!ELEMENT sequence-item                 (entry*,
                                         auto-pause*)>
<!ATTLIST sequence-item
  id           ID     #REQUIRED
  src          %URI;  #REQUIRED
>

<!ELEMENT auto-pause                    (#PCDATA)>

<!ELEMENT entry                         (#PCDATA)>
<!ATTLIST entry
  id           ID     #REQUIRED
>
@end example

@node @code{<pbc>} Container,  , @code{<sequence-items>} Container, @code{<videocd>} Root
@subsection @code{<pbc>} Container

@menu
* @code{<selection>} Element::  
* @code{<playlist>} Element::   
* @code{<endlist>} Element::    
@end menu

@example
<!ELEMENT pbc                           (selection|
                                         playlist|
                                         endlist)+>

<!ENTITY % pbcattrs
" id           ID     #REQUIRED
  rejected     (true|false) 'false'"
>

<!ENTITY % XY "CDATA">

<!ENTITY % ofsattrs
" ref          IDREF  #REQUIRED
  x1           %XY;   #IMPLIED
  y1           %XY;   #IMPLIED
  x2           %XY;   #IMPLIED
  y2           %XY;   #IMPLIED"
>
@end example

@node @code{<selection>} Element, @code{<playlist>} Element, @code{<pbc>} Container, @code{<pbc>} Container
@subsubsection @code{<selection>} Element

@example
<!ELEMENT selection                     (bsn?,
                                         prev?,
                                         next?,
                                         return?,
                                         default*,
                                         timeout?,
                                         wait?,
                                         loop?,
                                         play-item?,
                                         select*)>
<!ATTLIST selection
  %pbcattrs;
>

<!ELEMENT      bsn                      (#PCDATA)>
<!ELEMENT      prev                     EMPTY>
<!ELEMENT      next                     EMPTY>
<!ELEMENT      return                   EMPTY>
<!ELEMENT      default                  EMPTY>
<!ELEMENT      timeout                  EMPTY>
<!ELEMENT      wait                     (#PCDATA)>

<!ELEMENT      loop                     (#PCDATA)>
<!ATTLIST loop
  jump-timing  (immediate|delayed) 'immediate'
>

<!ELEMENT      play-item                EMPTY>
<!ELEMENT      select                   EMPTY>
@end example

@node @code{<playlist>} Element, @code{<endlist>} Element, @code{<selection>} Element, @code{<pbc>} Container
@subsubsection @code{<playlist>} Element

@example
<!ELEMENT playlist                      (prev?,
                                         next?,
                                         return?,
                                         playtime?,
                                         wait?,
                                         autowait?,
                                         play-item*)>
<!ATTLIST playlist
  %pbcattrs;
>

<!ELEMENT      prev                     EMPTY>
<!ELEMENT      next                     EMPTY>
<!ELEMENT      return                   EMPTY>
<!ELEMENT      playtime                 (#PCDATA)>
<!ELEMENT      wait                     (#PCDATA)>
<!ELEMENT      autowait                 (#PCDATA)>
<!ELEMENT      play-item                EMPTY>
@end example

@node @code{<endlist>} Element,  , @code{<playlist>} Element, @code{<pbc>} Container
@subsubsection @code{<endlist>} Element

@example
<!ELEMENT endlist                       (next-volume?,
                                         play-item?)>
<!ATTLIST endlist
  %pbcattrs;
>
@end example

@node Examples, Tips and Hints, VideoCD @acronym{XML} Description, Top
@chapter Examples

@menu
* Simple Multitrack Example::   
* @acronym{MPEG} Extraction::   
@end menu

@strong{outdated!!!}

@node Simple Multitrack Example, @acronym{MPEG} Extraction, Examples, Examples
@section Simple Multitrack Example

In the following example session, the files @file{track1.mpg},
@file{track2.mpg} and @file{track3.mpg} are mastered into the default
output files @file{videocd.cue} and @file{videocd.bin}. The volume label
is set to `My Test VCD'.

@example
@cartouche
$ vcdimager --iso-volume-label="My Test VCD" track1.mpg track2 track3.mpg 
finished ok, image created with 13421 sectors (31566192 bytes)
$
@end cartouche
@end example

@node @acronym{MPEG} Extraction,  , Simple Multitrack Example, Examples
@section @acronym{MPEG} Extraction

The next example show how to extract the @acronym{MPEG} streams
contained in the image file @file{test.bin} (the resulting streams are
stored in files named @file{track_##.mpg} with @samp{##} being the track
number, starting with 0).

@example
@cartouche
$ vcdrip-devel -v --rip --bin-file=test.bin     
--DEBUG: found ENTRIES.VCD/SVD
   INFO: track_00.mpg: 1262 -> 2555
--DEBUG:  stream leadin at 1292
--DEBUG:  stream leadout at 2360
   INFO: track_01.mpg: 2555 -> 101705
--DEBUG:  stream leadin at 2585
--DEBUG:  stream leadout at 101510
   INFO: track_02.mpg: 101705 -> 200994
--DEBUG:  stream leadin at 101735
--DEBUG:  stream leadout at 200799
   INFO: track_03.mpg: 200994 -> 300041
--DEBUG:  stream leadin at 201024
--DEBUG:  stream leadout at 299996
$
@end cartouche
@end example

@node Tips and Hints, Acronym Expansions, Examples, Top
@appendix Tips and Hints

@menu
* SVCD Player Compatibility::   
@end menu

@node SVCD Player Compatibility,  , Tips and Hints, Tips and Hints
@appendixsec SVCD Player Compatibility

If you have problems with your playing device failing to @emph{detect} a
created @acronym{SVCD}, you can may the following things (some of the
advices below apply to @acronym{VCD}s as well):

@enumerate
@item
Take warnings serious! If there were warnings issued during the image
building process, chances are the problems are related to them.

@item 
Make sure the @acronym{SVCD} is physically ok (e.g., analyze the disc
with @file{vcddebug} or try it on some other playing device).

@item
Try creating the @acronym{SVCD} by enabling the @code{svcd vcd30 mpegav}
and @code{svcd vcd30 entrysvd} options.

@item
Add an empty @file{/SEGMENT} dir, if it isn't created due to inclusion
of @acronym{SPI}s.

@end enumerate

@appendixsec Fast Forward/Fast Rewind with SVCD

Because of the @acronym{VBR} encoding of the @acronym{MPEG}-2 streams on
@acronym{SVCD}s, there's no fixed relation between sector index and
playing time. If scanning doesn't work with your playing device it can
be caused by:

@itemize @bullet
@item
The playing device does not support @acronym{FF}/@acronym{RW} with
@acronym{SVCD}s.@footnote{Sometimes upgrading the player firmware may
help.}

@item
The @acronym{MPEG}-2 stream does not include the mandatory scan
information data.

@item
@emph{more reasons to follow}

@end itemize

@appendix Character Sets

@appendixsec ISO646 d-Characters

@example
  | 0 1 2 3 4 5 6 7 
--+-----------------
0 |       0   P     
1 |       1 A Q     
2 |       2 B R     
3 |       3 C S     
4 |       4 D T     
5 |       5 E U     
6 |       6 F V     
7 |       7 G W     
8 |       8 H X     
9 |       9 I Y     
a |         J Z     
b |         K       
c |         L       
d |         M       
e |         N       
f |         O _     
@end example

@appendixsec ISO646 a-Characters

@example
  | 0 1 2 3 4 5 6 7
--+-----------------
0 |       0   P                    
1 |     ! 1 A Q                    
2 |     " 2 B R                    
3 |       3 C S                    
4 |       4 D T                    
5 |     % 5 E U                    
6 |     & 6 F V                    
7 |     ' 7 G W                    
8 |     ( 8 H X                    
9 |     ) 9 I Y                    
a |     * : J Z                    
b |     + ; K                      
c |     , < L                      
d |     - = M                      
e |     . > N                      
f |     / ? O _                    
@end example

@node Acronym Expansions, GNU GENERAL PUBLIC LICENSE, Tips and Hints, Top
@appendix Glossary

@include glossary.texi

@iftex
@appendix GNU General Public License
@end iftex
@ifinfo
@node GNU GENERAL PUBLIC LICENSE,  , Acronym Expansions, Top
@appendix GNU GENERAL PUBLIC LICENSE
@end ifinfo

@center Version 2, June 1991

@include gpl.texi

@bye

to-do:
* add node structure
* grammar check
