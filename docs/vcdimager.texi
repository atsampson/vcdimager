\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename vcdimager.info
@settitle The GNU Video CD Image Maker
@setchapternewpage on
@c %**end of header

@afourpaper

@include version.texi

@ifinfo
This file documents GNU VCDImager, The GNU Video CD Authoring Tools.

Copyright (C) Herbert Valerio Riedel @email{<hvr@@gnu.org>}

@sp 2
Permission is granted to make and distributed verbatim copies of this
manual, provided the copyright notice and this permission notice are
preserved on all copies. 

@ignore
Permission is granted to process this file through TeX and print the 
results, provided the printed document carries copying permission notice 
identical to this one except for the removal of this paragraph (this 
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by Herbert Valerio Riedel.
@end ifinfo

@titlepage
@title GNU VCDImager
@subtitle $Id$
@subtitle The GNU Video CD Authoring Tools.
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Herbert Valerio Riedel et al.

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001 Herbert Valerio Riedel @email{<hvr@@gnu.org>}
@sp 1
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``GNU General Public License'' are included exactly as
in the original, and provided that the entire resulting derived work is
distributed under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the sections entitled ``GNU General Public License'' may be
included in a translation approved by the Free Software Foundation
instead of in the original English.
@end titlepage

@c @summarycontents
@contents

@dircategory Miscellaneous
@direntry
* GNU VCDImager: (vcdimager).  The GNU Video CD Authoring Tools
@end direntry

@node Top, Introduction, (dir), (dir)

@menu
* Introduction::                
* Video CD Concepts::           
* Reference::                   
* VideoCD XML Description::     
* Examples::                    
* Tips and Hints::              
* Character Sets::              
* Acronym Expansions::          
* GNU General Public License::  

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Supplied Tools::              
* Features::                    

Video CD Concepts

* Overview::                    
* Anatomy of Video CDs::        
* Known Video CD Flavors::      
* The ISO9660 Track::           
* Constraints on @acronym{MPEG} streams::  
* Play Items::                  
* Playback Control::            

Known Video CD Flavors

* Video CD 1.1::                
* Video CD 2.0::                
* Extended Video CD::           
* Super Video CD 1.0::          
* Extended Super Video CD::     

The ISO9660 Track

* Primary Volume Descriptor::   
* Directory Structure::         

Directory Structure

* @file{/VCD} & @file{/SVCD} Directory::  
* @file{/MPEGAV} & @file{/MPEG2} Directory::  
* @file{/CDDA} Directory::      
* @file{/SEGMENT} Directory::   
* @file{/EXT} Directory::       
* @file{/CDI} Directory::       

Constraints on @acronym{MPEG} streams

* Video CD::                    
* Super Video CD::              
* Common Constraints::          

Super Video CD

* Scan Information Data::       

Common Constraints

* Alignment::                   
* Access Point Sectors::        

Play Items

* Sequence Items::              
* Segment Items::               

Sequence Items

* Advantages::                  
* Disadvantages::               

Segment Items

* Advantages2::                 
* Disadvantages2::              

Playback Control

* Function Keys for Interaction::  
* Linear Playback::             
* PBC Lists::                   
* Applications::                

PBC Lists

* Play List::                   
* Selection List::              
* End List::                    
* Command List::                

Reference

* Tools::                       

Tools

* @command{vcdimager}::         
* @command{vcddebug}::          
* @command{vcdxgen}::           
* @command{vcdxbuild}::         
* @command{vcdxrip}::           

@command{vcdxgen}

* Adding Files to the Video CD ::  
* CD-i Support::                

VideoCD XML Description

* Common Rules::                
* @code{<videocd>} Root::       

@code{<videocd>} Root

* @code{<option>} Element::     
* @code{<info>} Container::     
* @code{<pvd>} Container::      
* @code{<filesystem>} Container::  
* @code{<segment-items>} Container::  
* @code{<sequence-items>} Container::  
* @code{<pbc>} Container::      

@code{<filesystem>} Container

* @code{<folder>} Element/Containter::  
* @code{<file>} Element/Containter::  

@code{<segment-items>} Container

* @code{<segment-item>} Element::  

@code{<sequence-items>} Container

* @code{<sequence-item>} Element::  

@code{<pbc>} Container

* @code{<selection>} Element::  
* @code{<playlist>} Element::   
* @code{<endlist>} Element::    

Examples

* Simple Multitrack Example::   
* Video CD Disassembling::      

Tips and Hints

* SVCD Player Compatibility::   
* Fast Forward & Fast Rewind with Super Video CDs::  

Character Sets

* ISO646 d-Characters::         
* ISO646 a-Characters::         

@end detailmenu
@end menu

@node Introduction, Video CD Concepts, Top, Top
@unnumbered Introduction

This manual describes the @dfn{GNU VCDImager}@footnote{see
@uref{http://www.gnu.org/software/vcdimager/}} package, a toolset for
authoring, disassembling and analyzing Video CD's and Super Video CD's.

@menu
* Supplied Tools::              
* Features::                    
@end menu

@node Supplied Tools, Features, Introduction, Introduction
@section Supplied Tools

The following commandline tools are provided with this package:

@table @command
@item vcdimager
Simple frontend, allowing for easy commandline controlled generation of
basic @acronym{VCD} and @acronym{SVCD} disc images without an
intermediate @acronym{XML} description.

@item vcddebug
Analysation tool and report generator for @acronym{VCD} and
@acronym{SVCD} discs.

@item vcdxgen
@acronym{XML} @acronym{VCD}-description generator, with a commandline
interface similiar to the classic @command{vcdimager} frontend.

@item vcdxbuild
Builds a @acronym{VCD}/@acronym{SVCD} according to a supplied
@acronym{XML} description and files containing the @acronym{MPEG}
program streams referred to in the @acronym{XML} description.

@item vcdxrip
Disassembles a given @acronym{VCD} or @acronym{SVCD} disc into a
@acronym{XML} description and the contained @acronym{MPEG} program
streams.

@end table

The generated @acronym{CD-ROM} images created are suitable for being
burnt on to @acronym{CD-R}, by the use of a CD-recording program which
recognizes the @acronym{BIN/CUE}-format, such as cdrdao@footnote{see
@uref{http://www.ping.de/sites/daneb/cdrdao.html}}, for instance.

@node Features,  , Supplied Tools, Introduction
@section Features

Features of the backend library@footnote{the core of the GNU VCDImager
package consists of a library named @code{libvcd}, the frontends are
just user interfaces to the exported C-API}, on which all frontends
rely, include:

@itemize @bullet
@item
Support for Video CD 1.1 and 2.0 disc format.

@item
Support for Super Video CD 1.0@footnote{based on the @acronym{IEC}62107
specification with some extensions defined in the socalled `4C SVCD
System Specification 1.0'. Some support for the @emph{deprecated}
Chinese SVCD format is available through switches.} disc format.

@item 
Full @acronym{PBC} support, including customizable play lists, selection
lists and end lists.

@item
Support for segment (play) items (@acronym{SPI}).

@item
Support for up to 98 sequence items (@acronym{MPEG} tracks) per (Super) Video CD.

@item
Support for additional entry points into sequence items.

@item
Support for defining auto pause points in sequence items.

@item
General facility for adding files as mode 2 form 1 and 2 sectors to the
@acronym{ISO9660} file-system and setting some labels in the
@acronym{ISO9660} @acronym{PVD}

@item
Supports 99 minute @acronym{CD-R} media@footnote{...though most devices
will have problems with such an out-of-specification media. You may want
use the @option{--sector-2336} option for images longer than 80
minutes}.

@item 
Image input support for GNU/Linux ioctl()-based cdrom devices,
@acronym{BIN/CUE} images and @acronym{NRG} images.

@end itemize

@node Video CD Concepts, Reference, Introduction, Top
@chapter Video CD Concepts

This chapter gives some background information regarding the underlying
Video CD technology.

@strong{Warning:} All information in this chapter is presented without
any warranty of accuracy or correctness. You are encouraged to send
corrections and improvements for this manual to
@email{bug-vcdimager@@gnu.org}.

@menu
* Overview::                    
* Anatomy of Video CDs::        
* Known Video CD Flavors::      
* The ISO9660 Track::           
* Constraints on @acronym{MPEG} streams::  
* Play Items::                  
* Playback Control::            
@end menu

@node Overview, Anatomy of Video CDs, Video CD Concepts, Video CD Concepts
@section Overview

The Video Compact Disc (@dfn{Video CD} or @dfn{VCD}) is a standardized
digital video storage format. It is based on the commonly available
Compact Disc technology, which allows for low cost video authoring.
Video CD's can be played in most @acronym{DVD} standalone player,
dedicated VCD players and finally, modern Personal Computers with
multimedia support.

@node Anatomy of Video CDs, Known Video CD Flavors, Overview, Video CD Concepts
@section Anatomy of Video CD's

In general, the layout of a Video CD is as follows:

@itemize @bullet
@item
ISO9660 data track. @xref{The ISO9660 Track}.

@itemize @bullet 
@item 
ISO9660 structure at @code{00:02:00} consisting of 16 empty sectors,
primary volume descriptor (@dfn{PVD}) and directory records with file
pointers to information area structures (described below) and external
pointers to @acronym{MPEG}/@acronym{CD-DA} tracks following the
ISO9660 data track.

@item
Karaoke area at @code{00:03:00}.

@item
Video CD information area at @code{00:04:00}.

@item
Optional segment play item area with @acronym{MPEG} items aligned in 150
sector segments.

@item
Optional program and data file area, for additional files added to the
ISO9660 track.

@end itemize

@item
Up to 98 @acronym{MPEG} mode 2 form 2 or @acronym{CD-DA} tracks
embedded in lead-in and lead-out empty sectors.

@end itemize

@node Known Video CD Flavors, The ISO9660 Track, Anatomy of Video CDs, Video CD Concepts
@section Known Video CD Flavors

There are different Video CD flavors commonly used. The following
sections tries to explain the differences amongst them.

@menu
* Video CD 1.1::                
* Video CD 2.0::                
* Extended Video CD::           
* Super Video CD 1.0::          
* Extended Super Video CD::     
@end menu

@node Video CD 1.1, Video CD 2.0, Known Video CD Flavors, Known Video CD Flavors
@subsection Video CD 1.1

This is the most basic Video CD specification dating back to
1993@footnote{actually this flavor was based on the Karaoke-CD, which
was the first @acronym{MPEG} based @acronym{CD-ROM} format.}, which has
the following characteristics:

@itemize @bullet
@item
One mode 2 mixed form ISO9660 track containing file pointers to the
information areas.

@item
Up to 98 multiplex-ed @acronym{MPEG}-1 audio/video streams or
@acronym{CD-DA} audio tracks.

@item
Up to 500 @acronym{MPEG} track entry points.

@end itemize

The Video CD specification requires the multiplex-ed @acronym{MPEG}-1
stream to have a @acronym{CBR} of about 174300 bytes per
second@footnote{2324 bytes of payload per sector * 75 sectors per
second = 174300 bytes per second} in order to accommodate single speed
@acronym{CD-ROM} drives. This allows one of the following two
resolutions:

@itemize @bullet
@item
352 x 240 @@ 29.97 Hz (@acronym{NTSC}).
@item
352 x 240 @@ 23.976 Hz (@acronym{FILM}).
@end itemize

The @acronym{CBR} @acronym{MPEG}-1, layer II audio stream is fixed at
224kbps with 1 stereo or 2 mono channels.

@node Video CD 2.0, Extended Video CD, Video CD 1.1, Known Video CD Flavors
@subsection Video CD 2.0

About two years after the Video CD 1.1 specification came out, an
improved Video CD 2.0 standard was published. This one added the
following items to the features already available in the 1.1
specification:

@itemize @bullet
@item
Support for (optional) @acronym{MPEG} segment play items (@dfn{SPI}),
consisting of still pictures, motion pictures or audio streams was
added.

@item
Support for (optional) interactive playback control (@dfn{PBC}) was
added.

@item
Support for (optional) playing related access by providing a scan point
index file was added. (@file{/EXT/SCANDATA.DAT})

@end itemize

@noindent
By adding PAL support to the Video CD 1.1 specification, the following
resolutions became available:
@itemize @bullet
@item
352 x 240 @@ 29.97 Hz (@acronym{NTSC}).
@item
352 x 240 @@ 23.976 Hz (@acronym{FILM}).
@item
352 x 288 @@ 25 Hz (@acronym{PAL}).
@end itemize

@node Extended Video CD, Super Video CD 1.0, Video CD 2.0, Known Video CD Flavors
@subsection Extended Video CD

Also known as @dfn{XVCD}, this is not an official standard. It's
actually just a name for VCD's which do not conform with the official
standards in order to use the additional performance of the
@acronym{DVD} decoders and thus achieve better image quality. Such an
XVCD may be unsupported by many available stand-alone playing devices.

@node Super Video CD 1.0, Extended Super Video CD, Extended Video CD, Known Video CD Flavors
@subsection Super Video CD 1.0

With the upcoming of the @acronym{DVD} media, a new VCD standard had to
be published in order to be able to keep up with technology, so the
Super Video CD specification was called into life. Most notably a switch
from @acronym{MPEG}-1 CBR to @acronym{MPEG}-2 VBR encoding for the video
stream was performed. The following new features---based upon the Video 
CD 2.0 specification---are:

@itemize @bullet 
@item 
Use of @acronym{MPEG}-2 encoding instead of @acronym{MPEG}-1 for the
video stream.

@item
Allowed VBR encoding of @acronym{MPEG}-1 audio stream.

@item
Higher resolutions (see below) for video stream resolution.

@item
Overlay graphics and text (@dfn{OGT}) sub-channel coding for user
switchable subtitle displaying.
@end itemize

@noindent
For the Super Video CD, only the following two resolutions are supported
for motion pictures:

@itemize @bullet
@item
480 x 480 @@ 29.97 Hz (@acronym{NTSC}).
@item
480 x 576 @@ 25 Hz (@acronym{PAL}).
@end itemize

@node Extended Super Video CD,  , Super Video CD 1.0, Known Video CD Flavors
@subsection Extended Super Video CD

Just like the XVCD, and thus also known as @dfn{XSVCD}, this is not an
official standard and may not work with all playing devices supporting
SVCD's.

@node The ISO9660 Track, Constraints on @acronym{MPEG} streams, Known Video CD Flavors, Video CD Concepts
@section The ISO9660 Track

@menu
* Primary Volume Descriptor::   
* Directory Structure::         
@end menu

@node Primary Volume Descriptor, Directory Structure, The ISO9660 Track, The ISO9660 Track
@subsection Primary Volume Descriptor

This ISO9660 sector located at sector @acronym{LSN} 16 contains general
information about the ISO9660 filesystem, such as volume label, various
IDs, filesystem size, etc.

@node Directory Structure,  , Primary Volume Descriptor, The ISO9660 Track
@subsection Directory Structure

@menu
* @file{/VCD} & @file{/SVCD} Directory::  
* @file{/MPEGAV} & @file{/MPEG2} Directory::  
* @file{/CDDA} Directory::      
* @file{/SEGMENT} Directory::   
* @file{/EXT} Directory::       
* @file{/CDI} Directory::       
@end menu

@node @file{/VCD} & @file{/SVCD} Directory, @file{/MPEGAV} & @file{/MPEG2} Directory, Directory Structure, Directory Structure
@subsubsection @file{/VCD} & @file{/SVCD} Directory

This directories (@file{/SVCD} is used on Super Video CD's) contain file
entries to structures contained in the information area of a (Super)
Video CD.

@table @file
@item /VCD/INFO.VCD
General video disc information (e.g. album id, size of volume set and
number of @acronym{MPEG} items)

@item /VCD/ENTRIES.VCD
Entry point table.

@item /VCD/LOT.VCD
List ID Offset table into @file{PSD.VCD} (only allowed for Video CD 2.0
discs with @acronym{PBC})

@item /VCD/PSD.VCD
Play sequence descriptor file (only allowed for Video CD 2.0 discs with
@acronym{PBC}). This file may contain so-called lists (selection lists,
play lists and end lists) which represent the @acronym{PBC}.

@item /SVCD/INFO.SVD
@itemx /SVCD/ENTRIES.SVCD
@itemx /SVCD/LOT.SVD
@itemx /SVCD/PSD.SVD
These are the corresponding file names on Super Video CD's, and fulfill
the same purpose as those defined for the Video CD 2.0 format.

@item /SVCD/SEARCH.DAT
This file, mandatory for Super Video CD's, contains access point sector
addresses.

@item /SVCD/TRACKS.SVD
In this file additional information (e.g. playing time and stream
characteristics) about each sequence track is recorded.

@end table

@node @file{/MPEGAV} & @file{/MPEG2} Directory, @file{/CDDA} Directory, @file{/VCD} & @file{/SVCD} Directory, Directory Structure
@subsubsection @file{/MPEGAV} & @file{/MPEG2} Directory

This file contains file entries pointing to the sequence items contained
in the tracks after the ISO9660 track.

@node @file{/CDDA} Directory, @file{/SEGMENT} Directory, @file{/MPEGAV} & @file{/MPEG2} Directory, Directory Structure
@subsubsection @file{/CDDA} Directory

This file contains file entries pointing to optional CDDA tracks after
the ISO9660 track. This feature is not available for Super Video CD's.

@node @file{/SEGMENT} Directory, @file{/EXT} Directory, @file{/CDDA} Directory, Directory Structure
@subsubsection @file{/SEGMENT} Directory

This directory contains file entries to segment play items.

@node @file{/EXT} Directory, @file{/CDI} Directory, @file{/SEGMENT} Directory, Directory Structure
@subsubsection @file{/EXT} Directory

@table @file
@item /EXT/LOT_X.VCD
@itemx /EXT/PSD_X.VCD
These are only defined for Video CD 2.0, and contain the extended
@acronym{PBC}, which adds area definitions for pointer based selection
and/or highlighting of selection areas. (On Super Video CD's the extended
@acronym{PBC} has been merged into the main @file{/SVCD/PSD.SVD} file)

@item /EXT/SCANDATA.DAT
This file is optional, and defined (but with a different format) for
Video CD 2.0 and Super Video CD 1.0 formats. It contains playing time
related access information very similar to the @file{/SVCD/SEARCH.DAT}
file.

@item /EXT/CAPTnn.DAT
Closed caption data file entries.

@end table

@node @file{/CDI} Directory,  , @file{/EXT} Directory, Directory Structure
@subsubsection @file{/CDI} Directory

This directory is provided for @acronym{CD-i} player applications. (Only
useful for Video CD's)

@node Constraints on @acronym{MPEG} streams, Play Items, The ISO9660 Track, Video CD Concepts
@section Constraints on @acronym{MPEG} streams

GNU VCDImager expects @acronym{MPEG} streams in a format suitable for
(Super) Video CD production. Only a few cases where the @acronym{MPEG}
streams fail to adhere to this requirement are detected, thus it's up to
the user to ensure that the constraints are fulfilled.

@menu
* Video CD::                    
* Super Video CD::              
* Common Constraints::          
@end menu

@node Video CD, Super Video CD, Constraints on @acronym{MPEG} streams, Constraints on @acronym{MPEG} streams
@subsection Video CD

The Video CD specification requires the multiplex-ed @acronym{MPEG}-1
stream to have a bit rate of about 174300 bytes per second. The video
stream is required to have one of the following resolutions:

@itemize @bullet
@item
352 x 240 @@ 29.97 Hz (@acronym{NTSC}).
@item
352 x 240 @@ 23.976 Hz (@acronym{FILM}).
@item
352 x 288 @@ 25 Hz (@acronym{PAL}) (not supported on VCD 1.x!).
@end itemize

The audio stream must be @acronym{MPEG}-1 layer II, fixed to a 224
kbits/sec @acronym{CBR} with 1 stereo or 2 mono audio channels.

@node Super Video CD, Common Constraints, Video CD, Constraints on @acronym{MPEG} streams
@subsection Super Video CD

When creating Super Video CD images @acronym{MPEG}-2 @acronym{VBR}
streams are expected with a maximum allowed bit-rate of approximately
2.6 mbits/sec.  The following video resolutions are (officially)
supported@footnote{actually you can try other resolutions as well,
but then you are leaving the SVCD specification behind you...}:

@itemize @bullet
@item
480 x 480 @@ 29.97 Hz (@acronym{NTSC}).
@item
480 x 576 @@ 25 Hz (@acronym{PAL}).
@end itemize

The audio stream must be @acronym{MPEG}-1 layer II, with a bit-rate
ranging from 32 to 384 kbits/sec bit-rate (i.e. @acronym{VBR}!) 
with up to 2 stereo or 4 mono channels, or 1 extended @acronym{MPEG}-1/2
multichannel (5+1) surround sound stream.

@menu
* Scan Information Data::       
@end menu

@node Scan Information Data,  , Super Video CD, Super Video CD
@subsubsection Scan Information Data

According to the specification, it is mandatory to encode scan
information data into user data blocks in the picture layer of all intra
coded picture. It may be used by some playing devices for implementing
fast forward & fast reverse scanning.

The already existing scan information data can be updated by enabling
the @code{update scan offsets} option.

@node Common Constraints,  , Super Video CD, Constraints on @acronym{MPEG} streams
@subsection Common Constraints

@menu
* Alignment::                   
* Access Point Sectors::        
@end menu

@node Alignment, Access Point Sectors, Common Constraints, Common Constraints
@subsubsection Alignment

The @acronym{MPEG} program streams should be aligned to 2324
byte @acronym{MPEG} packet boundaries@footnote{i.e. pack headers must be
repeated every 2324 bytes, starting on byte 0}. If they pack headers
should happen not be aligned on 2324 byte boundaries, GNU VCDImager will
try@footnote{aligning only works, if @acronym{MPEG} packets are
@emph{not} bigger than 2324 bytes.} to align them on the fly while
issuing a warning that padding was needed. @strong{Warning:} Padding the
@acronym{MPEG} streams causes the bitrate at which the data is read to
be increased, this may lead to undesiderable effects.

If the image generation process should abort with an @acronym{MPEG}
related error message, it maybe either due to a bug or due to a
corrupted or non-compliant @acronym{MPEG} stream coding. In this case
re-encoding or re-multiplexing may help.

@node Access Point Sectors,  , Alignment, Common Constraints
@subsubsection Access Point Sectors

An @dfn{Access Point Sector}, @acronym{APS}, is an @acronym{MPEG} video
sector on the @acronym{VCD}/@acronym{SVCD} which is suitable to be
jumped to directly. @acronym{APS} are required for entry points and
scantables.

@acronym{APS} have to fullfill the requirement to precede every I
picture by a GOP header which shall be preceded by a sequence header in
its turn and begin all in the same packet, thus forming a so called
access point sector. 

This requirement can be relaxed by enabling the @code{relaxed aps}
option. @strong{Warning:} The sequence header is needed for a playing
device to figure out display parameters, such as display resoulution and
frame rate, relaxing the aps requirement may lead to non-working entry
points.

@node Play Items, Playback Control, Constraints on @acronym{MPEG} streams, Video CD Concepts
@section Play Items

@dfn{Play items} are the @acronym{MPEG} payload on (Super) Video
CD's. Sequences are usefull for seamless play of larger video sections,
whereas segments are better for smaller items in interactive
applications.

@menu
* Sequence Items::              
* Segment Items::               
@end menu

@node Sequence Items, Segment Items, Play Items, Play Items
@subsection Sequence Items

Each @dfn{sequence} is put in its own @acronym{CD} track. Motion video
stream is required, with optionally up to 2 audio streams.

@menu
* Advantages::                  
* Disadvantages::               
@end menu

@node Advantages, Disadvantages, Sequence Items, Sequence Items
@subsubsection Advantages

@itemize @bullet
@item 
Can be directly accessed without @acronym{PBC}.

@item
Entry points.

@item
Auto pause points.

@end itemize

@node Disadvantages,  , Advantages, Sequence Items
@subsubsection Disadvantages

@itemize @bullet
@item
Pre-gap of 150 empty sectors.

@item
Limit of 98 sequences.

@item
Must contain motion video.

@end itemize

@node Segment Items,  , Sequence Items, Play Items
@subsection Segment Items

A segment item can be
@itemize @bullet
@item 
@acronym{MPEG} video with @emph{optional} @acronym{MPEG} audio.

@item
@acronym{MPEG} encoded still pictures with @emph{optional}
@acronym{MPEG} audio.

@item
@acronym{MPEG} audio only.@footnote{which allows for several hours of audio play back}
@end itemize

@menu
* Advantages2::                 
* Disadvantages2::              
@end menu

@node Advantages2, Disadvantages2, Segment Items, Segment Items
@subsubsection Advantages

@itemize @bullet
@item
Up to 1980 segment items possible.

@item
Still pictures and audio only @acronym{MPEG} streams allowed.

@item
No pre-gaps.

@end itemize

@node Disadvantages2,  , Advantages2, Segment Items
@subsubsection Disadvantages

@itemize @bullet
@item
Only @acronym{PBC} accessible through @acronym{PBC}.

@item
Segement item size limited by @acronym{SPI} area size.

@end itemize

@node Playback Control,  , Play Items, Video CD Concepts
@section Playback Control

@dfn{Playback control}, @acronym{PBC}, is available for Video CD 2.0
and Super Video CD 1.0 disc formats. @acronym{PBC} allows control of the
playback of play items@footnote{sequence items and segment items} and
the possibility of interaction with the user through the remote control.

@menu
* Function Keys for Interaction::  
* Linear Playback::             
* PBC Lists::                   
* Applications::                
@end menu

@node Function Keys for Interaction, Linear Playback, Playback Control, Playback Control
@subsection Function Keys for Interaction

The following keys are usually found on the remote control belonging to
the playing device.

@table @key
@item NEXT
May also look like @key{>>|} on the remote control.

@item PREVIOUS
May also look like @key{|<<} on the remote control.

@item DEFAULT
This key is usually mapped to the @key{>} or @key{PLAY} key.

@item RETURN
This key may be mapped to the @key{STOP} key.

@item NUMERIC
This is actually a pseudo key, representing the numeric keys @key{0},
@key{1}, ..., @key{9}.

@end table

@node Linear Playback, PBC Lists, Function Keys for Interaction, Playback Control
@subsection Linear Playback

This playback mode is active, when the @acronym{PSD} is not
interpreted. In this mode, the @key{NUMERIC} key causes to start
playback at the entry in @file{ENTRY.VCD}/@file{ENTRY.SVD} with the
index number pressed. The @key{NEXT} and @key{PREVIOUS} keys play the
next or previous entry in that the entry file. This mode allows for
compliant playing devices to honour the entry points defined as chapter
entries.

@node PBC Lists, Applications, Linear Playback, Playback Control
@subsection PBC Lists

The control structures involved in @acronym{PBC} are called @dfn{lists}
and are stored in the @dfn{play sequence descriptor} file.

@menu
* Play List::                   
* Selection List::              
* End List::                    
* Command List::                
@end menu

@node Play List, Selection List, PBC Lists, PBC Lists
@subsubsection Play List

A @dfn{Play list} is basically a collection of play items which are to
be played in the order specified. Play lists allow to define target
lists for the @key{NEXT}, @key{PREVIOUS} and @key{RETURN} keys on the
remote control.

@node Selection List, End List, Play List, PBC Lists
@subsubsection Selection List

@dfn{Selection lists} are used to offer a user selection based on
numeric (@key{NUMERIC}) input or---if available---pointer device based
selection, while showing a play item.

Also features such as random selection, default target (@key{DEFAULT}),
timeout target and looping are supported.

@node End List, Command List, Selection List, PBC Lists
@subsubsection End List

An @dfn{end list} can be used to terminate the interpretation of the
@acronym{PBC} information.

@node Command List,  , End List, PBC Lists
@subsubsection Command List

@dfn{Command lists} are an optional feature defined for Super Video CD's,
allowing to execute opcodes in a virtual machine, allowing for enhanced
interactivity.

@node Applications,  , PBC Lists, Playback Control
@subsection Applications

@emph{...to be written...}

@node Reference, VideoCD XML Description, Video CD Concepts, Top
@chapter Reference

@menu
* Tools::                       
@end menu

@node Tools,  , Reference, Reference
@section Tools

@menu
* @command{vcdimager}::         
* @command{vcddebug}::          
* @command{vcdxgen}::           
* @command{vcdxbuild}::         
* @command{vcdxrip}::           
@end menu

@node @command{vcdimager}, @command{vcddebug}, Tools, Tools
@subsection @command{vcdimager}

This is the classic frontend, which is maintained only for ease of use
and because it does not relay on @command{libxml2} and thus may be the
only built frontend. @command{vcdimager} does not create a dummy
@acronym{PBC} anymore as in the past. It is recommended to familarize
with the @acronym{XML} frontends, in order to be able to use the
extended features offered by GNU VCDImager.

There are a few command-line options for @command{vcdimager} at the
moment, please issue @samp{vcdimager --help} for an actual list of
available options.

@node @command{vcddebug}, @command{vcdxgen}, @command{vcdimager}, Tools
@subsection @command{vcddebug}

While this project went along, @command{vcddebug} was used to analyze
and reverse engineer existing Video CD's and later Super Video CD's. It
has grown into a valuable debugging tool and report generator for
(Super) Video CD's. 

It is recommended to make use of this tool if compatibility problems
arise, to identify what the difference between working discs and
non-working discs are, and thus help to improve GNU VCDImager.


@node @command{vcdxgen}, @command{vcdxbuild}, @command{vcddebug}, Tools
@subsection @command{vcdxgen}

This tool works almost like the @command{vcdimager} tool, except that it
creates an intermediate @acronym{XML} description, instead of directly
building the disc image. This @acronym{XML} can be used as a starting
point for customization.

The @acronym{XML} file can then be fed to @command{vcdxbuild} for
building the actual image file(s).

@emph{FIXME: write more}

@menu
* Adding Files to the Video CD ::  
* CD-i Support::                
@end menu

@node Adding Files to the Video CD , CD-i Support, @command{vcdxgen}, @command{vcdxgen}
@subsubsection Adding Files to the Video CD 

Files can be added to the @acronym{ISO} file-system, that is the first
track of the Video CD, by making use of the command-line options
@option{--add-file=@var{FILE},@var{ISO_FILENAME}} and
@option{--add-file-2336=@var{FILE},@var{ISO_FILENAME}}.
The latter option allows you to include files containing the complete
user data of mode 2 CD-ROM sectors @footnote{8 bytes for subheader,
2324 bytes payload and finally 4 bytes for @acronym{EDC}}.

The path name given as @var{ISO_FILENAME} determines where to link the
file in the file-system of the Video CD. The given path name must be a
valid ISO9660 file name with the following restrictions:
@itemize @bullet
@item
The Character set is restricted to upper case letters, numbers, 
underscore @samp{_}, dot @samp{.} and slash @samp{/}.

@item
The maximum file name length is restricted to 31 characters, the
directory nesting level is restricted to 8 and the maximum path length
is limited to 255 characters.

@item
File names must contain exactly one dot.@footnote{if no file name
extension is supposed to exist the dot must be placed as a trailing
dot.}

@item
The path-name must not begin or end with a slash nor should it contain
slashes following directly each other.

@end itemize

If the parent directory for a file entry does not exist it will be
created automatically on demand.

@node CD-i Support,  , Adding Files to the Video CD , @command{vcdxgen}
@subsubsection CD-i Support
There is no specific CD-i support in GNU VCDImager. But you
can use the general facilities for adding a custom CD-i player
application. 

If you happen to have a CD-i application consisting of the files
@file{cdi_imag.rtf}, @file{cdi_text.fnt}, @file{cdi_vcd.app} and
@file{cdi_vcd.cfg}, with @file{cdi_vcd.app} being the main application
executable, you could add the following lines to your @file{~/.popt}
popt@footnote{see documentation for popt for more information about
option aliasing} aliasing file@footnote{add it to @file{/etc/popt} if
the setting should be available system-wide}

@example
vcdimager alias --cdi \
	--iso-application-id "CDI/CDI_VCD.APP;1" \
	--add-file-2336 /usr/share/cdi/cdi_imag.rtf,CDI/CDI_IMAG.RTF \
	--add-file      /usr/share/cdi/cdi_text.fnt,CDI/CDI_TEXT.FNT \
	--add-file      /usr/share/cdi/cdi_vcd.app,CDI/CDI_VCD.APP \
	--add-file      /usr/share/cdi/cdi_vcd.cfg,CDI/CDI_VCD.CFG 
@end example

@node @command{vcdxbuild}, @command{vcdxrip}, @command{vcdxgen}, Tools
@subsection @command{vcdxbuild}

This program allows to actually build a disc image, based on a given
@acronym{XML} description and the files referenced therein. It can be
thought of a Video CD @emph{compiler} for @acronym{XML} descriptions of
Video CD's.

@emph{FIXME: write more}

@node @command{vcdxrip},  , @command{vcdxbuild}, Tools
@subsection @command{vcdxrip}

This tool implements the inverse operation to @command{vcdxbuild}, i.e.,
taking an already built disc image and outputting all the file items and
the @acronym{XML} description necessary to recreate this (Super) Video
CD including any @acronym{PBC} information.

@table @option
@item --output-file
@itemx -o
This option allows to specify the xml file name for output. default:
@file{videocd.xml}.

@item --norip
By the use of this option, only the XML description is created, without
actually extracting any files or mpeg streams contained.
@end table

@emph{FIXME: write more}

@node VideoCD XML Description, Examples, Reference, Top
@chapter VideoCD XML Description

The @acronym{DTD} the @acronym{XML} description conforms to, can be
downloaded from @uref{http://www.gnu.org/software/vcdimager/videocd.dtd}.

XML examples are available at
@uref{http://www.hvrlab.org/~hvr/vcdimager/xml_repository.html}.

The use of @command{vcdxgen} is recommended as a starting point point,
when creating an advanced @acronym{XML} description.@footnote{Graphical user
interfaces to aid @acronym{XML} editing are in development, if you want
to join the @acronym{GUI} development group, please get into contact
with me at @email{<hvr@@gnu.org>}.}

@menu
* Common Rules::                
* @code{<videocd>} Root::       
@end menu

@node Common Rules, @code{<videocd>} Root, VideoCD XML Description, VideoCD XML Description

@section XML Simplified Rules

@itemize @bullet
@item
All attribute values must be quoted.

@item
White space within content, including line breaks, is significant.

@item
All start tags (@samp{<pbc>}) must have corresponding end tags (@samp{</pbc>}).

@item
Tags without content and those which are empty elements must use the
@samp{/>}-notation, e.g.: @samp{<next-volume-use-lid2 />}.

@item
Elements must not overlap; they may be nested, however.

@item
Element names are case sensitive: @samp{<videocd>} and @samp{<VideoCD>}
are two different entities.
@end itemize

@section DTD Notation

@table @code
@item ()
grouping expressions

@item A?
A or nothing (A is optional, but at most one A)

@item A+
one or more A?s (at least one)

@item A*
zero or more A's (A optional, but could be several A's)

@item (A | B | C)
either A or B or C (but only one)

@item (A, B, C)
first A, followed by B, then C (all, and in this order)

@item (A & B)
both A and B, in any order

@end table

@section Common VideoCD XML Rules

All time related entries@footnote{@code{<wait>}, @code{<autowait>},
@code{<playtime>}, @code{<time-offset>}} are given in seconds.

For the @code{<wait>} and @code{<autowait>} time entries, @samp{-1}
means @emph{infinite}. For @code{<loop>} and @code{<playtime>} @samp{0}
means @emph{repeat forever} and @emph{play until end} accordingly.

Items and their associated IDs fall into two categories, @emph{play
items} and @emph{PSD items}. Every reference to an ID has to be of the
right class, otherwise the reference can't be resolved, due to a failing
lookup. A @emph{play item} can be any of the following:

@itemize @bullet
@item
play nothing item, (omitted @code{ref} attribute).
@item
sequence item, @code{<sequence-item>}.
@item
entry point into sequence item, @code{<entry>}.
@item segment item
segment play item, @code{<segment-item>}.
@end itemize

Whereas a @emph{PSD item} is required to be one of:

@itemize @bullet
@item
disabled, (omitted @code{ref} attribute).
@item
selection list, @code{<selection>}.
@item
play list, @code{<playlist>}.
@item
end list, @code{<endlist>}.
@end itemize

@node @code{<videocd>} Root,  , Common Rules, VideoCD XML Description
@section @code{<videocd>} Root

@menu
* @code{<option>} Element::     
* @code{<info>} Container::     
* @code{<pvd>} Container::      
* @code{<filesystem>} Container::  
* @code{<segment-items>} Container::  
* @code{<sequence-items>} Container::  
* @code{<pbc>} Container::      
@end menu

@example
<!ELEMENT videocd                       (option*,
                                         info,
                                         pvd,
                                         filesystem?,
                                         segment-items?,
                                         sequence-items,
                                         pbc?)>
<!ATTLIST videocd
  class        CDATA  #REQUIRED
  version      CDATA  #REQUIRED
  xmlns        %URI;  #FIXED 'http://www.gnu.org/software/vcdimager/1.0/'
>

<!ENTITY % URI "CDATA">
@end example

Supported combinations of @var{class} and @var{version} are listed below:

@multitable @columnfractions .10 .10 .80
@item @var{class} @tab @var{version} @tab Description
@item @samp{vcd}  @tab @samp{1.1}
@tab VideoCD 1.1
@item @samp{vcd}  @tab @samp{2.0}
@tab VideoCD 2.0
@item @samp{svcd}  @tab @samp{1.0}
@tab SuperVideoCD 1.0 (IEC-62107)
@end multitable

The @code{xmlns} attribute defines the @acronym{XML} namespace.

@node @code{<option>} Element, @code{<info>} Container, @code{<videocd>} Root, @code{<videocd>} Root
@subsection @code{<option>} Element

@example
<!ELEMENT option                        EMPTY>
<!ATTLIST option 
  name         CDATA  #REQUIRED
  value        CDATA  #IMPLIED
>
@end example

The following option @var{name} are recognized.  At the moment only
@samp{true} or @samp{false} is recognized as @var{value}.

@table @samp
@item svcd vcd30 mpegav
Rename @file{/MPEG2} folder on @acronym{SVCD}s to (non-compliant)
@file{/MPEGAV}.  Default: @samp{false}.

@item svcd vcd30 entrysvd
Enables the use of the (deprecated) signature @samp{ENTRYSVD} instead of
@samp{ENTRYVCD} for the file @file{/SVCD/ENTRY.SVD}. Default:
@samp{false}.

@item relaxed aps
This controls whether @acronym{APS} constraints are strict or
relaxed. Default: @samp{false}. @xref{Access Point Sectors}. 

@item update scan offsets
This controls whether to update the scan data information contained in
the @acronym{MPEG}-2 video streams@footnote{It is required, that the
stream has already user data groups with scan information data, in order
for this feature to work}. Default: @samp{false}. @xref{Scan Information
Data}.

@end table

@node @code{<info>} Container, @code{<pvd>} Container, @code{<option>} Element, @code{<videocd>} Root
@subsection @code{<info>} Container

@example
<!ELEMENT info                          (album-id?,
                                         volume-count?,
                                         volume-number?,
                                         next-volume-use-sequence2?,
                                         next-volume-use-lid2?,
                                         restriction?,
                                         start-time-offset*)>

<!ELEMENT album-id                      (#PCDATA)>
<!ELEMENT volume-count                  (#PCDATA)>
<!ELEMENT volume-number                 (#PCDATA)>
<!ELEMENT next-volume-use-sequence2     EMPTY>
<!ELEMENT next-volume-use-lid2          EMPTY>
<!ELEMENT restriction                   (#PCDATA)>
<!ELEMENT start-time-offset             (#PCDATA)>
@end example

The @code{<info>} section allows to customize the information contained
in the @file{VCD/INFO.VCD} or @file{VCD/INFO.SVD}.

@table @code
@item <album-id>
Name of the album@footnote{An @emph{album} is defined as a series of
discs which contain related content} which the discs belongs to.

@item <volume-count>
Total number of volumes (discs) in the album identified by @code{<album-id>}.

@item <volume-number>
Ordinal number of the volume (disc) in the album.

@item <next-volume-use-sequence2/>
If @acronym{PBC} interpretation is disabled, start the next disc if it
has the same @code{<album-id>} at the second sequence instead of the
first.

@item <next-volume-use-lid2/>
If @acronym{PBC} is present and interpretation enabled, start the next
disc if it has the same @code{<album-id>} at the second @acronym{PBC}
list instead of the first one.

@item <restriction>
Restriction category. This element allows to set viewing restrictions
which may be interpreted by the playing device. The allowed range goes
from @samp{0}, i.e. unrestricted, to @samp{3}, i.e. restriction category
3.@footnote{The exact meaning of the restriction categories is depending
on the interpreting playing device.}

@item <start-time-offset>
Only for Super Video CD's. Up to 5 @code{<start-time-offset>} may be
defined, which represent the start time offsets for the first 5 discs of
an album. @emph{not implemented yet}

@end table

@node @code{<pvd>} Container, @code{<filesystem>} Container, @code{<info>} Container, @code{<videocd>} Root
@subsection @code{<pvd>} Container

@example
<!ELEMENT pvd                           (volume-id?,
                                         system-id?,
                                         application-id?,
                                         preparer-id?,
                                         publisher-id?)>

<!ELEMENT volume-id                     (#PCDATA)>
<!ELEMENT system-id                     (#PCDATA)>
<!ELEMENT application-id                (#PCDATA)>
<!ELEMENT preparer-id                   (#PCDATA)>
<!ELEMENT publisher-id                  (#PCDATA)>
@end example

This part of the XML structure describes the primary volume descriptor
of the disc.

@table @code
@item <volume-id>
Volume label of the @acronym{CD-ROM}. Content restricted to upto 32
d-characters.

@item <system-id>
System id of the @acronym{CD-ROM}. Content restricted to upto 32
a-characters. Should be set to @samp{CD-RTOS CD-BRIDGE} for Video CD's
for @acronym{CD-i} compatibility.  This field is overriden by vcdimager and set to
@samp{CD-RTOS CD-BRIDGE}.

@item <application-id>
Defines the application pathname for @acronym{CD-i} playing devices.

@item <preparer-id>
This field is used by vcdimager to put a version string on the Video CD,
regardless of the content given in the XML description.

@item <publisher-id>
@emph{not implemented yet}.
@end table

@node @code{<filesystem>} Container, @code{<segment-items>} Container, @code{<pvd>} Container, @code{<videocd>} Root
@subsection @code{<filesystem>} Container

@menu
* @code{<folder>} Element/Containter::  
* @code{<file>} Element/Containter::  
@end menu

@example
<!ELEMENT filesystem                    (folder*,
                                         file*)>
@end example

This section of the @acronym{XML} description allows for the creation of
additional folders and files into the ISO9660 filesystem on the Video
CD.

@node @code{<folder>} Element/Containter, @code{<file>} Element/Containter, @code{<filesystem>} Container, @code{<filesystem>} Container
@subsubsection @code{<folder>} Element/Containter

@example
<!ELEMENT folder                        (name,
                                         folder*,
                                         file*)>

<!ELEMENT name                          (#PCDATA)>
@end example

@node @code{<file>} Element/Containter,  , @code{<folder>} Element/Containter, @code{<filesystem>} Container
@subsubsection @code{<file>} Element

@example
<!ELEMENT file                          (name)>
<!ATTLIST file 
  src          %URI;  #REQUIRED
  format       (form1|mixed) "form1"
>
<!ELEMENT name                          (#PCDATA)>
@end example

@node @code{<segment-items>} Container, @code{<sequence-items>} Container, @code{<filesystem>} Container, @code{<videocd>} Root
@subsection @code{<segment-items>} Container

@menu
* @code{<segment-item>} Element::  
@end menu

@example
<!ELEMENT segment-items                 (segment-item)+>
@end example

@node @code{<segment-item>} Element,  , @code{<segment-items>} Container, @code{<segment-items>} Container
@subsubsection @code{<segment-item>} Element

@example
<!ELEMENT segment-item                  EMPTY>
<!ATTLIST segment-item 
  id           ID     #REQUIRED
  src          %URI;  #REQUIRED
>
@end example

@table @code
@item <segment-item>
Element representing a segment item. Segment play items need to be
referenced from the @command{<pbc>} section in order to be accessible at
all.

@item id
ID value referenced in @code{ref} attributes.

@item src
This attribute specifies the external file name of the item,
i.e. @acronym{MPEG} stream, to be included.

@end table

@node @code{<sequence-items>} Container, @code{<pbc>} Container, @code{<segment-items>} Container, @code{<videocd>} Root
@subsection @code{<sequence-items>} Container

@menu
* @code{<sequence-item>} Element::  
@end menu

@example
<!ELEMENT sequence-items                (sequence-item)+>
@end example

@node @code{<sequence-item>} Element,  , @code{<sequence-items>} Container, @code{<sequence-items>} Container
@subsubsection @code{<sequence-item>} Element

@example
<!ELEMENT sequence-item                 (default-entry?,
                                         entry*,
                                         auto-pause*)>
<!ATTLIST sequence-item
  id           ID     #IMPLIED
  src          %URI;  #REQUIRED
>

<!ELEMENT auto-pause                    (#PCDATA)>

<!ELEMENT default-entry EMPTY>
<!ATTLIST default-entry
  id           ID     #REQUIRED
>

<!ELEMENT entry                         (#PCDATA)>
<!ATTLIST entry
  id           ID     #IMPLIED
>
@end example

@table @code
@item <sequence-item>
Element representing a sequence item. Each sequence item corresponds to
a single track in the resulting disc.

@item id
ID value referenced in @code{ref} attributes.

@item src
This attribute specifies the external file name of the item,
i.e. @acronym{MPEG} stream, to be included.

@item <auto-pause>
This element specifies where to insert auto pause points, whose wait
time is controlled by play lists. The time is given in seconds from the
beginning of the sequence.

@item <default-entry>
Represents the mandatory default entry point pointing to the start of
the sequence@footnote{Referencing the default entry point id should
be aequivalent to referencing the sequence id. Depending on the firmware
of the playing device, the sequence id may reflect the start of the
sequence as defined by the TOC, while the default entry id gets defined
by the address defined in the @file{ENTRY.VCD} or @file{ENTRY.SVD}}.

@item <entry>
Defines an additional entry point into the sequence item. Up to 99 entry
points (including the default entry point) can be defined per sequence,
while only a maximum of 500 entry points@footnote{every sequence point
has automatically an entry point defined, which must be substracted from
the maximum of 500 entry points} can be present in the whole disc. The
entry point time is given in seconds from the beginning of the sequence.

@item id
Play item ID value referenced in @code{ref} attributes. 

@end table

@node @code{<pbc>} Container,  , @code{<sequence-items>} Container, @code{<videocd>} Root
@subsection @code{<pbc>} Container

@menu
* @code{<selection>} Element::  
* @code{<playlist>} Element::   
* @code{<endlist>} Element::    
@end menu

@example
<!ELEMENT pbc                           (selection|
                                         playlist|
                                         endlist)+>

<!ENTITY % pbcattrs
" id           ID     #REQUIRED
  rejected     (true|false) 'false'"
>

<!ENTITY % XY "CDATA">

<!ENTITY % ofsattrs
" ref          IDREF  #REQUIRED
  x1           %XY;   #IMPLIED
  y1           %XY;   #IMPLIED
  x2           %XY;   #IMPLIED
  y2           %XY;   #IMPLIED"
>

<!ELEMENT play-item                      EMPTY>
<!ATTLIST play-item
  ref          IDREF  #IMPLIED
>
@end example

@table @code
@item id
ID value referenced in @code{ref} attributes.

@item rejected
Attribute controlling, whether item is not listed, i.e. @emph{rejected},
in the @acronym{LOT}.

@item x1
@itemx y1
@itemx x2
@itemx y2
Screen Co-ordinates for selection hotspot areas, with @samp{0,0} being
the upper left and @samp{255,255} being the lower right screen
point. @code{x1} and @code{y1} are required to be less than @code{x2}
and @code{y2} respectively.

@item play-item
This empty element is used to reference play item ids. If the @code{ref}
attribute is ommited, the @samp{play nothing item} is implicitly
referenced.

@end table

@node @code{<selection>} Element, @code{<playlist>} Element, @code{<pbc>} Container, @code{<pbc>} Container
@subsubsection @code{<selection>} Element

@example
<!ELEMENT selection                     (bsn?,
                                         prev?,
                                         next?,
                                         return?,
                                         (multi-default|default)?,
                                         timeout?,
                                         wait?,
                                         loop?,
                                         play-item?,
                                         select*)>
<!ATTLIST selection
  %pbcattrs;
>

<!ELEMENT      bsn                      (#PCDATA)>
<!ELEMENT      prev                     EMPTY>
<!ELEMENT      next                     EMPTY>
<!ELEMENT      return                   EMPTY>

<!ELEMENT      default                  EMPTY>
<!ELEMENT      multi-default            EMPTY>
<!ATTLIST multi-default
  numeric      (enabled|disabled)  'enabled'
>

<!ELEMENT      timeout                  EMPTY>
<!ELEMENT      wait                     (#PCDATA)>

<!ELEMENT      loop                     (#PCDATA)>
<!ATTLIST loop
  jump-timing  (immediate|delayed) 'immediate'
>

<!ELEMENT      play-item                EMPTY>
<!ELEMENT      select                   EMPTY>
@end example

@table @code
@item <bsn>
Base selection number, the numeric value which is taken as the first
selection number. The default is @emph{1} and the allowed range goes
from 1 upto 99.

@item <prev>
Target list id jumped to on @key{PREVIOUS} key press.

@item <next>
Target list id jumped to on @key{NEXT} key press.

@item <return>
Target list id jumped to on @key{RETURN} key press.

@item <default>
Target list id jumped to on @key{DEFAULT} key press. May not be present
at the same time with the following element.

@item <multi-default>
When present, causes the selection list to be a multi default selection
list, i.e. that the target list id of the @key{DEFAULT} depends on which
part of the sequence item is playing. The @code{numeric} attributes, if
@emph{disabled}, allows to disable the @key{NUMERIC} keys. When using
multi default selections, the @code{<bsn>} must be set to 1 and the
number of selection must match the number of all entry points of the
sequence referenced by @code{<play-item>}.

@item <timeout>
Target list id to be jumped on timeout of @code{<wait>}. If ommitted
(and @code{<wait>} is not set to an infinite time) one of the
@code{<select>} targets is selected at random!

@item <wait>
Time in seconds to wait after playback of @code{<play-item>} before
triggering the @code{<timeout>} action (unless the user triggers some
action before time ran up).

@item <loop>
Times to repeat the playback of @code{<play-item>}. the
@code{jump-timing} attribute controls whether the playback of
@code{<play-item>} is finished, thus @emph{delayed}, before executing
user triggered action or an @emph{immediate} jump is perfomed. After the
specified amount of repetitions are completed, the @code{<wait>} time
begins to count down, unless set to an infinite wait time.

When the @code{jump-timing} is set to @emph{delayed}, it is recommended
that the length of the referenced @code{<play-item>} is not more than 5
seconds. The recommended setting for a play item consisting of one still
picture and no audio is to loop once and have a @emph{delayed}.
@code{jump-timing}.

@item <play-item>
The @emph{play item} to be played while waiting for user intervention.

@item <select>
Target list id(s) jumped to on @key{NUMERIC} key presses. There may be
up to 99 select choices. The sum of @code{<bsn>} and the number of
@code{<select>} elements per @code{<selection>} must not be greater than
100.

@end table

@node @code{<playlist>} Element, @code{<endlist>} Element, @code{<selection>} Element, @code{<pbc>} Container
@subsubsection @code{<playlist>} Element

@example
<!ELEMENT playlist                      (prev?,
                                         next?,
                                         return?,
                                         playtime?,
                                         wait?,
                                         autowait?,
                                         play-item+)>
<!ATTLIST playlist
  %pbcattrs;
>

<!ELEMENT      prev                     EMPTY>
<!ELEMENT      next                     EMPTY>
<!ELEMENT      return                   EMPTY>
<!ELEMENT      playtime                 (#PCDATA)>
<!ELEMENT      wait                     (#PCDATA)>
<!ELEMENT      autowait                 (#PCDATA)>
<!ELEMENT      play-item                EMPTY>
@end example

@table @code

@item <prev>
Target list id jumped to on @key{PREVIOUS} key press.

@item <next>
Target list id jumped to on @key{NEXT} key press.

@item <return>
Target list id jumped to on @key{RETURN} key press.

@item <playtime>
The amount of seconds to play of every @code{<play-item>}.

@item <wait>
Time in seconds to wait after each playback of @code{<play-item>} before
proceding.

@item <autowait>
Time in seconds to wait at each defined @code{<auto-pause>} point for
sequence items referenced in this play list.

@item <play-item>
The @emph{play item(s)} to play in order. Up to 255 @code{<play-item>}
elements may be defined per @code{<playlist>}.

@end table

@node @code{<endlist>} Element,  , @code{<playlist>} Element, @code{<pbc>} Container
@subsubsection @code{<endlist>} Element

@example
<!ELEMENT endlist                       (next-volume?,
                                         play-item?)>
<!ATTLIST endlist
  %pbcattrs;
>

<!ELEMENT next-volume                   (#PCDATA)>
@end example

@table @code
@item <next-volume>
Only supported for Super Video CD's. If set to @emph{0} stop
@acronym{PBC} intepretation, otherwise switch to the selected volume
number.

@item <play-item>
Only supported for Super Video CD's. Displays the referenced image while
waiting for a volume change. Referenced play item must be a still
picture.
@end table

@node Examples, Tips and Hints, VideoCD XML Description, Top
@chapter Examples

@menu
* Simple Multitrack Example::   
* Video CD Disassembling::      
@end menu

@node Simple Multitrack Example, Video CD Disassembling, Examples, Examples
@section Simple Multitrack Example

In the following example session, the files @file{track1.mpg},
@file{track2.mpg} and @file{track3.mpg} are mastered into the default
output files @file{videocd.cue} and @file{videocd.bin}. The volume label
is set to `My Test VCD'.

@example
@cartouche
$ vcdimager --iso-volume-label="MY_TEST_VCD" track1.mpg track2 track3.mpg 
   INFO: scanning mpeg sequence item #0 for scanpoints...
   INFO: scanning mpeg sequence item #1 for scanpoints...
   INFO: scanning mpeg sequence item #2 for scanpoints...
   INFO: writing track 1 (ISO9660)...
   INFO: writing track 2, MPEG1, NTSC (352x240/30fps), 1 audio stream...
   INFO: writing track 3, MPEG1, PAL (352x288/25fps), 1 audio stream...
   INFO: writing track 4, MPEG1, NTSC (352x240/30fps), 1 audio stream...
finished ok, image created with 13626 sectors [03:01.51]
$
@end cartouche
@end example

The same with @acronym{XML} based tools:

@example
@cartouche
$ vcdxgen --iso-volume-label="MY_TEST_VCD" track1.mpg track2 track3.mpg 
(Super) VideoCD xml description created successfully as `videocd.xml'
$ vcdxbuild videocd.xml
   INFO: scanning mpeg sequence item #0 for scanpoints...
   INFO: scanning mpeg sequence item #1 for scanpoints...
   INFO: scanning mpeg sequence item #2 for scanpoints...
   INFO: writing track 1 (ISO9660)...
   INFO: writing track 2, MPEG1, NTSC (352x240/30fps), 1 audio stream...
   INFO: writing track 3, MPEG1, PAL (352x288/25fps), 1 audio stream...
   INFO: writing track 4, MPEG1, NTSC (352x240/30fps), 1 audio stream...
finished ok, image created with 13626 sectors [03:01.51]
$
@end cartouche
@end example

@node Video CD Disassembling,  , Simple Multitrack Example, Examples
@section Video CD Disassembling

The next example show how to extract the @acronym{PBC} information and
the @acronym{MPEG} streams contained in the image file
@file{videocd.bin} (the resulting streams are stored in files named
@file{avseq##.mpg} with @samp{##} being the track number, starting with
0).

@example
@cartouche
$ vcdxrip -b videocd.bin
   INFO: detected extended VCD2.0 PBC files
   INFO: extracting avseq00.mpg... (start lsn 450 (+4739))
   INFO: extracting avseq01.mpg... (start lsn 5189 (+4160))
   INFO: extracting avseq02.mpg... (start lsn 9349 (+4277))
   INFO: writing xml description to `videocd.xml'...
   INFO: done
$
@end cartouche
@end example

@node Tips and Hints, Character Sets, Examples, Top
@appendix Tips and Hints

@menu
* SVCD Player Compatibility::   
* Fast Forward & Fast Rewind with Super Video CDs::  
@end menu

@node SVCD Player Compatibility, Fast Forward & Fast Rewind with Super Video CDs, Tips and Hints, Tips and Hints
@appendixsec SVCD Player Compatibility

If you have problems with your playing device failing to @emph{detect} a
created @acronym{SVCD}, you can may the following things (some of the
advices below apply to @acronym{VCD}s as well):

@enumerate
@item
Take warnings serious! If there were warnings issued during the image
building process, chances are the problems are related to them.

@item 
Make sure the @acronym{SVCD} is physically ok (e.g., analyze the disc
with @command{vcddebug} or try it on some other playing device).

@item
Try creating the @acronym{SVCD} by enabling the @code{svcd vcd30 mpegav}
and @code{svcd vcd30 entrysvd} options.

@item
Add an empty @file{/SEGMENT} dir, if it isn't created due to inclusion
of @acronym{SPI}s.

@end enumerate

@node Fast Forward & Fast Rewind with Super Video CDs,  , SVCD Player Compatibility, Tips and Hints
@appendixsec Fast Forward & Fast Rewind with Super Video CD's

Because of the @acronym{VBR} encoding of the @acronym{MPEG}-2 streams on
@acronym{SVCD}s, there's no fixed relation between sector index and
playing time. If scanning doesn't work with your playing device it can
be caused by:

@itemize @bullet
@item
The playing device does not support @acronym{FF}/@acronym{RW} with
@acronym{SVCD}s.@footnote{Sometimes upgrading the player firmware may
help.}

@item
The @acronym{MPEG}-2 stream does not include the mandatory scan
information data or when included, it doesn't follow the
specification@footnote{@code{libvcd} warns if scan information is
missing or syntactically wrong.}

@item
Some playing devices require a sequence header before each @acronym{GOP}
header. @xref{Access Point Sectors}.

@end itemize

@node Character Sets, Acronym Expansions, Tips and Hints, Top
@appendix Character Sets

@menu
* ISO646 d-Characters::         
* ISO646 a-Characters::         
@end menu

@node ISO646 d-Characters, ISO646 a-Characters, Character Sets, Character Sets
@appendixsec ISO646 d-Characters

@example
  | 0 1 2 3 4 5 6 7 
--+-----------------
0 |       0   P     
1 |       1 A Q     
2 |       2 B R     
3 |       3 C S     
4 |       4 D T     
5 |       5 E U     
6 |       6 F V     
7 |       7 G W     
8 |       8 H X     
9 |       9 I Y     
a |         J Z     
b |         K       
c |         L       
d |         M       
e |         N       
f |         O _     
@end example

@node ISO646 a-Characters,  , ISO646 d-Characters, Character Sets
@appendixsec ISO646 a-Characters

@example
  | 0 1 2 3 4 5 6 7
--+-----------------
0 |       0   P                    
1 |     ! 1 A Q                    
2 |     " 2 B R                    
3 |       3 C S                    
4 |       4 D T                    
5 |     % 5 E U                    
6 |     & 6 F V                    
7 |     ' 7 G W                    
8 |     ( 8 H X                    
9 |     ) 9 I Y                    
a |     * : J Z                    
b |     + ; K                      
c |     , < L                      
d |     - = M                      
e |     . > N                      
f |     / ? O _                    
@end example

@node Acronym Expansions, GNU General Public License, Character Sets, Top
@appendix Glossary

@include glossary.texi

@iftex
@appendix GNU General Public License
@center Version 2, June 1991
@include gpl.texi
@end iftex

@ifinfo
@node GNU General Public License,  , Acronym Expansions, Top
@appendix GNU GENERAL PUBLIC LICENSE
@center Version 2, June 1991
@include gpl.texi
@end ifinfo

@bye

to-do:
* add node structure
* grammar check
