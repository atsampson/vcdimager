\input texinfo @c -*-texinfo-*-

@paragraphindent 2
@exampleindent 0

@c %**start of header
@setfilename vcddump.info
@set program @kbd{vcddump}
@c A simple macro for optional variables.
@macro ovar{varname}
@r{[}@var{\varname\}@r{]}
@end macro

@settitle The GNU Video CD Dump Program (@value{program})
@setchapternewpage on
@c %**end of header

@include version-vcddump.texi
@ifinfo
This file documents GNU Video CD Dump Program (@value{program})

Copyright (C) Rocky Bernstein @email{<rocky@@panix.com>}

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``Free Software'' and ``Free Software Needs
Free Documentation'', with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.

(a) The Free Software Foundation's Back-Cover Text is: ``You have
freedom to copy and modify this GNU Manual, like GNU software.  Copies
published by the Free Software Foundation raise funds for GNU
development.''
@end ifinfo

@titlepage
@title GNU Video CD Dump Program (@value{program})
@subtitle $Id$
@subtitle The GNU Video CD Authoring Tools.
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Rocky Bernstein et al.
@page

@vskip 0pt plus 1filll

Copyright @copyright{} 2003 Rocky Bernstein @email{<rocky@@panix.com>}
@sp 1
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``Free Software'' and ``Free Software Needs
Free Documentation'', with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.

(a) The Free Software Foundation's Back-Cover Text is: ``You have
freedom to copy and modify this GNU Manual, like GNU software.  Copies
published by the Free Software Foundation raise funds for GNU
development.''
@end titlepage
@page

@ifnottex
@node Top, Introduction, (dir), (dir)

@top The GNU Video CD Dump Program (@value{program})

This file documents GNU Video CD Dump Program.

Copyright (C) 2003 Rocky Bernstein

@dircategory Miscellaneous
@menu
* Introduction::        What is the program and why would I use it? 
* Command Options::     How do I get this to do anything? 
* Output Sections::     How do interpret the output? 
* Some Examples::       Okay, enough talk. How about some simple examples?
* History and Thanks::  History and Acknowledgments
* General Index::       Overall index
* Option Index::        Index for options
* Sub-Option Index::    Index for sub-options
@end menu
@end ifnottex

@contents

@node Introduction
@chapter Introduction

Note in the guide, we use the term VCD to mean some sort of Video
Compact Disk. There are various formats of Video Compact Disks, the
oldest format of which is called VCD followed by a version number:
1.0, 1.1 or 2.0. Hopefully by context it should be clear whether we
are referring to a class of Video Compact Disks or the specific older
format called VCD @emph{version-number}.

@value{program}'s mission in life is to display the contents of a VCD
image. Well, that's not actually true---if given an audio CD (CD-DA)
or some other kind of CD, @value{program} will try to display some
information about that, perhaps just a list of the tracks, with
varying degrees of success; However VCDs are what @value{program}
understands best and it will you the most detail about.  The disk
``image'' does not have to reside on a physical Compact Disk;
@value{program} understand the BIN/CUE disk-image format used by a
popular DOS/Window mastering tool.

You might use the information from @value{program} as a diagnostic or
analytical tool. It may help you understand a particular VCD that you
have. Or it might be useful in conjunction with or in debugging a VCD
you are creating (``authoring''). But debugging is probably best left
for another tool; @value{program} will only let you display information, you
can't modify anything with this tool and it is not interactive.

Although I imagine most of the time this is how you will use
@value{program}, there are some subsidiary uses.

@value{program} shows information about a VCD and as such the
information shown reflects, sort of, the way the information is
stored. So in a sense @value{program} can teach you a little bit about
how a VCD is laid out.

In writing an VCD input plugin for a media player, I wanted to get
bits of information about the VCD to display in the media player, such
as the VCD format used and the volume name. Before writing a C library
for such purposes, a lower-tech, and more loosely-coupled way to do
this was used. The program ran @value{program} with the specific
information request and parsed the text output. For example, to get just
the format that the VCD on the``default'' CD-ROM device is in you
might run:

@smallexample
  vcddump --no-banner --show-format
@end smallexample 

To get the album information you might run:

@smallexample
  vcddump --no-banner --show-info album
@end smallexample 

After doing this for a while and seeing this was useful, I then wrote
a VCD ``info'' library. A library is much faster and furthermore much
of the information is saved away in memory reducing the amount of disk
I/O. Later it turned out that I could shift the I/O completely from my
program and use the I/O from that or another library, but that's a
different story. What's relevant is that after creating this library,
I then modified @value{program} to use this library. The
@value{program} code then got shorter (as some of it getting moved
inside the vcdinfo library), and this program served as a test bed for
the library. (It also happens that the input plugin was much harder
and slower to debug than @value{program} since it is a ``shared
object'' and part of a larger program with many other such shared
objects.)

So the last thing that @value{program} may be of useful for is if you
want to see how to use the vcdinfo library; you can consult the source
program and see how @value{program} gets its information via vcdinfo.

@node Command Options
@chapter Command Options

There are a number of miscellaneous options, but there are two broad
categories of options. There is a set of options for specifying what
to dump, these all start @kbd{--show-} and another set of options
which specify where the CD-ROM or CD-ROM disk-image is.

@menu
* Where Options::     Options controlling where to read from 
* What Options::      Options controlling what do you want shown
* All Options::       A complete list of options
@end menu

@node Where Options
@section Options controlling where to read from 

If you don't specify any place to read from @value{program} will try
to read from the default device that may be appropriate for your OS.

There are two broad categories of input, reading from a device that
contains a Compact Disk, and reading from a file on the filesystem
that contains an image that could be burned into a Compact Disk.  The
option for the former category, reading a physical CD, is
@kbd{--cdrom-device} (@kbd{-C}); options for the latter category,
reading a file containing a CD disk image, are @kbd{--bin-file}
(@kbd{-b}), @kbd{--cue-file} (@kbd{-c}). There is one other option
@kbd{--input} (@kbd{-i}) which blurs the distinction---it tries to
figure out based on the name whether you are reading from a device
containing a CD or not and do the appropriate thing.  Of course, since
it only makes sense to read from one place, these options are mutually
exclusive; use only one option from this set.

@menu
* BIN or CUE file::     Reading from a file containing a CD disk image
* CD-ROM Device::       Reading from a CD-ROM device
* Intelligent Input::   Reading from whereever
@end menu

@node BIN or CUE file
@subsection Reading from a file containing a CD disk image
@cindex Reading, BIN or CUE file

The option @kbd{--bin-file} and @kbd{--cue-file} (the short forms for
these are @kbd{-b} and @kbd{-c} respectively) indicate to read from a
file containing an image what might be burned onto Compact Disk. The
format is expected to be in the BIN/CUE format that cdrdao uses and is
used by a popular DOS/Windows CD mastering tool. If you use the
@kbd{--bin-file} option, the file read is expected to be the ``.BIN''
part---this is the bulk of the data.  If you use @kbd{--cue-file} the
file read is a funny sort of TOC (Table of Contents) file. The
corresponding BIN file (which again contains the bulk of the data) is
not taken from the FILE statement inside the CUE file, but it is
constructed from the CUE file name by replacing ".cue" by ".bin".  The
CUE file must have exactly one FILE statement.

If you do not specify a file name after @kbd{--bin-file}, a default
name is used ``videocd.bin'' is probably used; likewise if you do not
specify a filename after --cue-file a default name is used, probably
``videocd.cue.'' These names I believe are the default output file
names used when you use vcdimager or vcdxbuild.

It is preferable to specify a CUE file over a BIN file since this will
give @value{program} TOC and, in particular, track information that it
cannot get otherwise.

@node CD-ROM Device
@subsection Reading from CD-ROM Device
@cindex Reading, CD-ROM Device

The option @kbd{--cdrom-device} or the short form @kbd{-C} is used
when you want to read from a Compact Disk. The name given would be the
device name. If you don't specify a device, a default will be selected
based on the Operating System or information that can be gleaned from
the OS. For example on GNU/Linux, the default device may be
@kbd{/dev/cdrom}, while on Solaris it might be
@kbd{/vol/dev/aliases/cdrom0}.

@node Intelligent Input
@subsection Reading from whereever
@cindex Reading, whereever

The option @kbd{--input} or the short form of this @kbd{-i} tries to
be intelligent by trying to figure out whether the thing you are
referring to is a device or a bin/cue disk image of a CD.

Currently the algorithm it uses is pretty simple. If the thing
referred to is what in Unix is called a ``block'' or ``character''
device, then it assumes a device name. When you do ``long listing''
(``ls -l'') of the name and track down possible symbolic links
you will see a ``b'' or ``c'' in the first colum if the file is a
block or character devcies.

If the thing referred to in an @kbd{--input} option is a ``regular''
file then it is assumed you have a file image of a CD. If the filename
ends (i.e. the extension is) ``.bin'' or ``.BIN'' then we assume a
``BIN file'' and if the filename ends ``.cue'' or ``.CUE'' then we
assume a CUE file. 

Although this algorithm is subject to change and there may be more
sophisticated or alternative methods, in practice I think this does
pretty much what's expected.

@node What Options
@section Options controlling what do you want shown

@value{program} is pretty flexible about the information it can show
you.

By default @value{program} will show just about everything it can
about a VCD image. There is additional information you can get using
the option @kbd{--verbose}, but this is of a debugging nature. 

However if you specify something in particular to dump, for example to
dump track information via command option @kbd{--show-tracks},
@value{program} switches behavior and shows you almost nothing except
what you asked for. I wrote ``almost nothing except'' rather than
``nothing except'' because by default there still is a little bit of
extra information that is shown: delimiters between requested sections
and a banner. However there are options to turn these off too. You
don't have to ask for just one section or one item of a section at a
time, you can list many individual items or sections together.

Most of the individual items that can be shown are part of a larger
group listed in @ref{Output Sections,,Output Sections}. For example to
show the volume id of the VCD image which resides in the PVD
sections of output you would use the option @kbd{--show-pvd vol}.

@cindex suboptions
To show everything in one of these large sections you give the section
name followed by ``-all.'' So to see the entire PVD section you would
use the command option @kbd{--show-pvd-all}.

To see a list of the suboptions available use the sub-option ``help'';
for example to see the sub-options available for the PVD section, you
would use the command option @kbd{--show-pvd help}.

@node All Options
@section A complete list of options

@table @code
@item --help
@kindex @code{--help}
This option give a list of options type @kbd{--help}. @kbd{-?} is an
abbreviation however you will probably have to ``escape'' the question
mark so that the shell doesn't interpret this; i.e. you may have to
type @kbd{-\?}.

@item --usage
@kindex @code{--usage}
This option shows an abbreviated usage message

@item --sector-2336
@kindex @code{--2336}
@kindex @code{--sector-2336}
This option only makes sense if you are reading from a file CD-image.
This indicated to @value{program} to assume a 2336-byte sector mode
for image file.

@item --verbose
@itemx -v
@kindex @code{--vebose}
This opton gives more verbose, debugging  output.

@item --terse
@itemx -t
@kindex @code{--terse}
This option is the same as giving the combined options
@kbd{--no-header --no-banner --no-delimiter}.  This option can be
useful if this program is getting called for information from another
program and you don't want to have filter this information out.

@item --no-banner
@itemx -B
@kindex @code{--banner}
Do not show program banner header and CVS Id line. This would be
useful in a regression test program where you want to check the output
but know that the version information is going to change over time.

@item --no-delimiter
@itemx -D
@kindex @code{--no-delimiter}
Do not show delimiter lines around various the sections of @ref{Output
Sections,,Output Sections}.

@item --quiet
@itemx -q
@kindex @code{--quiet}
Show only critical messages

@item --version
@itemx -V
@kindex @code{--version}
Display version and copyright information (the stuff that is
suppressed by @kbd{--no-banner} and exit after displaying this
information. Sometimes, you just wanna know what version you got.
@end table

Use at most one option in an invocation from the following list. These
options are described in general in @ref{Where Options,,Options
controlling where to read from}.

@table @code
@item --bin-file @ovar{filename}
@itemx -b @ovar{filename}
@kindex @code{--bin-file}
Specifies a BIN file to read from. See @ref{BIN or CUE file,,Reading
from a file containing a CD disk image} for more information.


@item --cdrom-device @ovar{device-name}
@itemx -C @ovar{device-name}
@kindex @code{--cdrom-device}
Specifies a CD-ROM device to read from. See @ref{CD-ROM
Device,,Reading from CD-ROM Device} for more information.

@item --cue-file @ovar{filename}
@itemx -c @ovar{filename}
@kindex @code{--cue-file}
Specifies a CUE file to read from. Preferred over a BIN file if
available. See @ref{BIN or CUE file,,Reading from a file containing a
CD disk image} for more information.

@item --input @ovar{file or device name}
@itemx -i @ovar{file or device name}
@kindex @code{--input}
This option is insensitive to whether the thing reading from is a
CD-ROM device or a file. See @ref{Intelligent Input,,Reading from
whereever} for more information.

@end table

The options below controll how much output you get and described in
general in @ref{Output Sections,,Output Sections}.

@table @code
@item --show-entries-all
@itemx -E
@kindex @code{--show-entries-all}
List everything in the PVD section. See @ref{Entries,,Entries Section} for
information about what is in this section.

@item --show-entries @var{sub-option}
@kindex @code{--show-entries}

Sub-options are: ``count'', ``data'', ``id'', ``prof'', or ``vers''.

@ftable @code
@item count
The number of entries. A number.
@item data
A complete list of the entries.
@item id
An 8 characters name, probably ``ENTRYVCD''
@item prof
System profile tag.
@item vers
A 2-hex digit number.
@end ftable

@item --show-filesystem
@itemx -F 
@kindex @code{--show-filesystem}
List everything in the PVD section. See @ref{Filesystem,,Filesystem} for
information about what is in this section.

@item --show-format
@itemx -f 
@kindex @code{--show-format}
Show the format that the VCD is in. The value will be one of ``VCD 1.1'',
``VCD 2.0'', ``SVCD'', or ``HQVCD''.

@item --show-info-all
@kindex @code{--show-info-all}
List everything in the PVD section. See @ref{Info,,Info Section} for
information about what is in this section.

@item --show-info @var{suboption}
@itemx -I @ovar{sub-option}
@kindex @code{--show-info}

Sub-options are: album, cc, count, id, ofm, lid2, lidn, pal, pbc,
prof, psds, res, seg, segn, segs, spec, start, st2, vers, or vol.

@ftable @code
@item album
A description of the album; it could be an album id. The XML tag for
this is <album-id>. It is a fixed-length blank-padded string of 16
characters.
@item cc
user data cc.
@item count
The number of disks in the volume, an integer. The XML tag for this is
<volume-count>.
@item id
A string representing the VCD format; e.g. ``SUPERVCD'' or
``VIDEO_CD''. Maxiumum of 8 characters.
@item ofm
offset multiplier. Value is given is in hexadecimal.
@item lid2
start lid #2. A boolean value. The XML tag for this is
<next-volume-use-lid2>.
@item lidn
Maximum LID number.
@item pal
@item pbc
@item prof
System profile tag. A hexadecimal number 
@item psds
PSD size.
@item res
Restriction number. The XML tag for this is <restriction>.
@item seg
First segment MSF address. 
@item segn
Max segment number. A number. 
@item segs
Number of segments. A number.
@item spec
Special info. A boolean value.
@item start
start time offset. Only relevant if SVCD or HQVCD. The XML tag for
this is <start-time-offset>.
@item st2
start track #2. A boolean value. The XML tag for this is
<next-volume-use-sequence2>.
@item vers
@item vol
The volume number. The XML tag for this is <volume-number>.
@end ftable

@item --show-lot
@itemx -L
@kindex @code{--show-lot}

List everything in the LOT section. See @ref{LOT,,LID Offset Table
(LOT) Section) Section} for information about what is in this section.

@item --show-psd
@itemx -p
@kindex @code{--show-psd}

List everything in the PSD section. See @ref{PSD,,Program Segment
Descriptors (PSD) Section} for information about what is in this
section.

@item --show-pvd-all
@kindex @code{--show-pvd-all}
List everything in the PVD section. See @ref{PVD,,Primary Volume
Descriptor (PVD) Section} for information about what is in this
section.

@item --show-pvd @var{suboption}
@itemx -P @ovar{sub-option}
@kindex @code{--show-pvd}

Sub-options are: app, id, iso, prep, pub, sys, vers, vol,
volset, or xa.

@ftable @code
@item app
The application id; a string of at most 128 characters. The XML tag for
this is <application-id>.
@item id
Some sort of string ID.
@item iso
ISO size in blocks.
@item prep
preparer id; a string of at most 128 characters. The XML tag for this
is <preparer-id>.
@item pub
publisher id. The XML tag for this is <publisher-id>.
@item sys
The system ID; a string of at most 32 characters. The XML tag for this
is <system-id>.
@item vers
The version ID. A decimal number.
@item vol
The volume ID. The XML tag for this is <volume-id>.
@item volset
Volumeset id. 
@item xa
A boolean indicating whether the XA marker is present or not.
@end ftable

@item --show-scandata
@itemx -s
@kindex @code{--show-scandata}

@item --show-search
@itemx -X
@kindex @code{--show-search}

@item --show-source
@itemx -S
@kindex @code{--show-source}

Just list out where you are reading from and the size of the image.

@item --show-tracks
@itemx -T
@kindex @code{--show-tracks}

List everything in the Tracks section. See @ref{Tracks,,Tracks Section} for
information about what is in this section.

@end table

@node Output Sections
@chapter Output Sections

When you run @value{program} to display the contents of an entire disk,
unless you use the option @kbd{--no-delimiter} (@kbd{-D}) you'll notice large
sections of output separated by a string of dashes like this:

@smallexample
------------------------------------------------------------------------
@end smallexample 

These separate the major logical sections of a VCD

@menu
* PVD::                 Primary Volume Descriptor (PVD) Section
* Filesystem::          ISO 9660 Information
* Entries::             Entries Section
* Info::                Info Section
* LOT::                 LID Offset Table (LOT) Section
* PSD::                 Program Segment Descriptors (PSD) Section
* Tracks::              Tracks 
@end menu

@node PVD
@section Primary Volume Descriptor (PVD) Section
@cindex Primary Volume Descriptor (PVD) 

@smallexample
ISO9660 primary volume descriptor
 ID: `CD001'
 version: 1
 system id: `CD-RTOS CD-BRIDGE'
 volume id: `PAL_TEST_SVCD'
 volumeset id: `'
 publisher id: `Herbert Valerio Riedel'
 preparer id: `GNU VCDIMAGER 0.7.10 LINUX-GNU/I386'
 application id: `'
 ISO size: 1426 blocks (logical blocksize: 2048 bytes)
 XA marker present: yes
@end smallexample

@node Filesystem
@section ISO-9660 section

This section contains something that looks pretty much like a
directory listing. Here's a sample: 

@smallexample
 /:
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  d d---1xrxrxr 0 0 [fn 00] [LSN     19]      2048  EXT
  d d---1xrxrxr 0 0 [fn 00] [LSN     20]      2048  MPEGAV
  d d---1xrxrxr 0 0 [fn 00] [LSN     21]      2048  VCD

 /EXT/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     19]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ----1xrxrxr 0 0 [fn 01] [LSN    225]     65536  LOT_X.VCD;1
  - ----1xrxrxr 0 0 [fn 01] [LSN    257]      6800  PSD_X.VCD;1

 /MPEGAV/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     20]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ---2-xrxrxr 0 0 [fn 01] [LSN    450] 639546208 (563593216)  AVSEQ01.DAT;1

 /VCD/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     21]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ----1xrxrxr 0 0 [fn 00] [LSN    151]      2048  ENTRIES.VCD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    150]      2048  INFO.VCD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    152]     65536  LOT.VCD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    184]      2456  PSD.VCD;1
@end smallexample

Note that all the filenames seem to end with @kbd{;1}. ISO 9660
filename translation is not performaed; if it were, this would be
stripped. 

A little about the funny ``attribute'' characters at the beginning of
left-hand side of the listing. For the most part it looks like what
you would get in a Unix listing. Except there are these 1's and 2's
before what in unix would be the user/group/other mode attribibutes.
Those numbers indicate whether the track is ``mode2 form1'' or ``mode2
form2.'' So the example above, AVSEQ01.DAT is in a mode2 form2 track
while every other entry listed is in a mode2 form1 track.  The movie
part is is this mode2 form2 track while the remaining meta-data part
is in a mode2 form1 track.

Another unusal thing about that single mode2 form2 track containing
AVSEQ01.DAT, is that there seem to be two numbers listed before the
AVSEQ01.DAT entry. All the other mode2 form1 entries have a single
number listed beforehand. The first number (63954208) is the number of
bytes that is occupied on the disk proper. The second number in
parenthesis (563593216) is the number of bytes if you assumed the file
had 2048-byte blocks rather than the 2334-byte mode2 format2
blocksize. If you were to mount the CD filesystem you might see the
second smaller number in a listing there.

The exact meaning of the attributes section is listed below:

@itemize @bullet
@item
The 1st character is either "d" if the entry is a directory, or "-" if
not.
@item
The 2nd character is either "a" if the entry is CD-DA (audio), or "-"
if not.
@item
The 3rd character is either "i" if the entry is interleaved, or "-" if
not.
@item
The 4th character is either "2" if the entry is mode2 form2 or "-" if
not.
@item
The 5th character is either "1" if the entry is mode2 form1 or "-" if
not.Note that an entry will either be in mode2 form1 or mode form2. That
is you will either see "2-" or "-1" in the 4th & 5th positions.
@item
The 6th and 7th characters refer to permissions for everyone while the
@item
the 8th and 9th characters refer to permissions for a group while, and
@item
the 10th and 11th characters refer to permissions for a user.
@end itemize
 
In each of these pairs the first character (6, 8, 10) is "x" if the
entry is executable. For a directory this means the directory is
allowed to be listed or "searched".  The second character of a pair
(7, 9, 11) is "r" if the entry is allowed to be read.

The item in brackets, e.g. @kbd{[LSN 450]} for the AVSEQ01.DAT entry
is the ``logical sector number'' or the place on the CD where the
entry starts.

@node Entries
@section Entries Section

Here is part of sample output from the VCD used above.

@smallexample
VCD/ENTRIES.VCD
 ID: `ENTRYVCD'
 version: 0x02
 system profile tag: 0x00
 entries: 31
 ENTRY[00]: track# 1 (SEQUENCE[0]), LSN 450 (MSF 00:08:00)
 ENTRY[01]: track# 1 (SEQUENCE[0]), LSN 482 (MSF 00:08:32)
 ENTRY[02]: track# 1 (SEQUENCE[0]), LSN 5888 (MSF 01:20:38)
 ENTRY[03]: track# 1 (SEQUENCE[0]), LSN 8925 (MSF 02:01:00)
 ...
@end smallexample

In the above example, in the first line corresponds the ``filename''
in the files section that starts at logical sector number 151. If this
VCD were in SVCD format that line would probably say
``SVCD/ENTRIES.SVD.'' As is indicated above I made 31 entries for the
VCD; only the first 4 are shown. Depending on how playback control is
set up you should be able to randomly access up to 31 different
playback locations on this VCD. If you use a media player like xine
and my plugin for it, there is a way jump to the beginning of each of
these entries.

The ``track #'' and SEQUENCE number are about the same thing, the
track being one more than the SEQUENCE number. Note the first entry is
also at logical sector number 450, the same as AVSEQ01.DAT. In other
words ``Entry 0'' is the start of the movie.

The minutes, seconds, frames number (MSF 00:08:00) is equivalent to
the LSN number. For those who wonder how to from the MSF to the LSN
you basically multiply the seconds (8) by 75 since there are 75 frames
in a second (note this has nothing to do with how fast this is
displayed). If you get this you get 600 which is a bit large. But
that's because the MSF number 00:00:00 is equal to 150 or the ``pregap
sector size.''


@node Info
@section Info Section

Here is part of sample output from a SVCD. (This is not the same
example as the VCD used before.)

@smallexample
SVCD/INFO.SVD
 ID: `SUPERVCD'
 version: 0x01
 system profile tag: 0x00
 album desc: `                '
 volume count: 3
 volume number: 2
 pal flags: 00000000 00000000 00000000 00000000 00000000 00000000
  (bslbf)   00000000 00000000 00000000 00000000 00000000 00000000 00
 flags:
  reserved1: no
  restriction: 0
  special info: no
  user data cc: no
  start lid #2: no
  start track #2: no
  reserved2: no
 psd size: 2376
 first segment addr: 00:05:00
 offset multiplier: 0x08
 maximum lid: 15
 maximum segment number: 3
 SEGMENT[1]: audio: no stream, video: NTSC still, continuation no, OGT substream: None
 SEGMENT[2]: audio: no stream, video: NTSC still, continuation no, OGT substream: None
 SEGMENT[3]: audio: no stream, video: NTSC still, continuation no, OGT substream: None
 volume start time[0]: 0 secs
 volume start time[1]: 0 secs
 volume start time[2]: 0 secs
 volume start time[3]: 0 secs
 volume start time[4]: 0 secs
@end smallexample

@node LOT
@section LID Offset Table (LOT) Section

Here is part of sample output from a SVCD of this section.

@smallexample
SVCD/LOT.SVD
 LID[1]: offset = 0 (0x0000)
 LID[2]: offset = 216 (0x001b)
 LID[3]: rejected
@end smallexample

We have list id's (LIDs). The offset are offsets into the Program
Segment descriptors described in @ref{PSD, Program Segment Descriptors
(PSD) Section}. LID 3 is rejected which means that you are not
supposed to be able to jump to that entry directly but may reach it
through program control.


@node PSD
@section Program Segment Descriptors (PSD) Section
@cindex Program Segment Descriptors (PSD) 

Here is part of sample output from the test PAL SVCD that can be found
from:
@url{http://www.vcdimager.org/pub/vcdimager/examples/test_svcd/test_svcd_pal.zip}

@smallexample
SVCD/PSD.SVD
 PSD[00] (LID[1] @@0x0000): play list descriptor
  NOI: 2 | LID#: 1 (rejected: no)
  prev: disabled | next: LID[2] @@0x0003 | return: disabled
  playtime: 0/15s | wait: 0s | autowait: 0s
  play-item[0]: SEGMENT[8] (0x03ef)
  play-item[1]: SEGMENT[7] (0x03ee)
@end smallexample

The first line SVCD/PSD.SVD again is the file entry that we are
reading. Since the CD image is in the SVCD format have that particular
name. If the CD image were in VCD 1.1 or VCD 2.0 format the line would
read VCD/PSD.VCD.

Above NOI shows that there are two play-item entries, the individual
entries are given below. We also see that this item is not
``rejected'' and thus could be accessed directly from a player.

The corresponding XML text for the above output is:

@smallexample
  <playlist id="playlist-01">
    <next ref="playlist-02"/>
    <wait>0</wait>
    <autowait>0</autowait>
    <play-item ref="segment-0007"/>
    <play-item ref="segment-0006"/>
  </playlist>
@end smallexample

Some of the tag names like ``play-item,'' ``wait, and ``autowait''
given above match what are in the XML description. Although, you won't
find ``next,'' ``prev'' or ``return'' listed, the tag names are also
the same. In the XML you are free to omit values and you will get
default values put in; in @value{program} you see what has been filled
in.

Below is another excerpt from that file.

@smallexample
  PSD[03] (LID[4] @@0x0007): selection list descriptor
  Flags: 0x01 | NOS: 9 | BSN: 1 | LID: 4 (rejected: yes)
  prev: disabled | next: disabled | return: disabled
  default: LID[12] @@0x0029 | timeout: LID[2] @@0x0003
  wait: 10 secs | loop: 1 (delayed: no)
  play-item: SEGMENT[1] (0x03e8)
  ofs[0]: LID[6] @@0x0015
  ofs[1]: LID[7] @@0x0017
  ofs[2]: LID[8] @@0x0019
  ofs[3]: LID[9] @@0x001b
  ofs[4]: LID[11] @@0x0026
  ofs[5]: LID[10] @@0x001d
  ofs[6]: LID[13] @@0x002b
  ofs[7]: disabled
  ofs[8]: LID[14] @@0x002e
  prev_area: disabled | next_area: disabled
  retn_area: disabled | default_area: disabled
  area[0]: disabled
  area[1]: disabled
  area[2]: disabled
  area[3]: disabled
  area[4]: disabled
  area[5]: disabled
  area[6]: disabled
  area[7]: disabled
  area[8]: disabled
@end smallexample

The XML excerpt that corresponds to this part is this:

@smallexample
  <selection id="selection-01" rejected="true">
    <bsn>1</bsn>
    <default ref="playlist-10" x1="0" y1="0" x2="0" y2="0"/>
    <timeout ref="playlist-02"/>
    <wait>10</wait>
    <loop jump-timing="immediate">1</loop>
    <play-item ref="segment-0000"/>
    <select ref="playlist-05" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-06" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-07" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-08" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-09" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="selection-02" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-11" x1="0" y1="0" x2="0" y2="0"/>
    <select/>
    <select ref="playlist-12" x1="0" y1="0" x2="0" y2="0"/>
   </selection>
@end smallexample

@node Tracks
@section Tracks
@cindex Tracks

Here is part of sample output from the test PAL SVCD that can be found
from:
@url{http://www.vcdimager.org/pub/vcdimager/examples/test_svcd/test_svcd_pal.zip}

@smallexample

SVCD/TRACKS.SVD
 ID: `TRACKSVD'
 version: 0x01
 tracks: 1
 track[00]: 00:59:61, audio: 2 streams, video: PAL stream, OGT stream: all available

(VCD3.0 interpretation)
(track[00]: 00:59:61 (cumulated), audio: 00, ogt: de)
----------------------------------------------------------------------------
CDROM TRACKS
 tracks:  1
 track #  1: 00:23:01, size:   13547520
 leadout   : 01:39:61
@end smallexample

There is one track on this SVCD with two audio streams (channel 0 is
in German and stream 1 is in English but the language information
can't be determined from information on the dist). The video stream is
in PAL format and there is a subtitle as OGT (Overlay Graphics
Text). The subtitle's a private stream id in the MPEG file ahs
hexidecimal number 0xde.

The bottom part of the display shows track info obtained in a
lower-level way. The information above CDROM TRACKS comes from
meta-data read in that IS09660 filesystem. 

If you are reading from a CD-ROM device, this information comes from
comes requsts from the device to give track information. If what you
are reading is a disk image, the only way to get this information has
to come from the CUE file which is why it is better to specify a CUE
file than a BIN file.

@node Some Examples
@chapter Some simple command invocations.

Perhaps you want to dump all information about the CD that is
currently sitting in your CD-ROM drive. If this location has a name
that is ``default'' for that OS then this might work:

@smallexample
  vcddump
@end smallexample 

It means the same thing as:
@smallexample
  vcddump --cdrom-device
@end smallexample 

and using the ``short'' option:
@smallexample
  vcddump -C
@end smallexample 

I have a combined CD-ROM and DVD drive called @kbd{/dev/dvd}. I have
another CD-ROM drive which goes under the name @kbd{/dev/cdrom}, but I
generally prefer to use the DVD/CD-ROM drive for reading since it
doesn't seem to run as hot. Since that drive is not the ``default''
(@kbd{/dev/cdrom}) on my GNU/Linux box, I have to give a location. So
this will work:

@smallexample
  vcddump -C=/dev/dvd
@end smallexample 

Or even better, I'll let @value{program} figure out it's a CD-ROM device:
@smallexample
  vcddump -i /dev/dvd
@end smallexample 
The equals sign before @kbd{/dev/dvd} is optional in either format.

Let's say you just used vcdimager or vcdxbuild it created output to
its ``default'' location (probably @kbd{videocd.cue} and
@kbd{videocd.bin}. To dump out this out:
@smallexample
  vcddump --cue-file
@end smallexample 

But if you specified the output to go to say @kbd{nausicaa.bin} and
@kbd{nausicaa.cue} you would have to specify that location like this:
@smallexample
  vcddump -c nausicaa.cue
@end smallexample 

Or again not having to worry about what type of file you could use 
the ``intelligent'' input option again as we did before:
@smallexample
  vcddump -i nausicaa.cue
@end smallexample 

To list all of the suboptions to choose from in the Primary Volume
Descriptor section (PVD) try this:
@smallexample
  vcddump --show-pvd help
@end smallexample 

Okay, now for for some more obscure stuff. Let's say I'm writing a
front-end GUI to do all sorts of stuff and I just need something to
pick out the format (VCD 1.1, VCD 2.0, SVCD, HQVCD) that a VCD in
drive is located. Since I have to read in this output, I don't want
any extra lines not relevant other than the version. 

@smallexample
  vcddump --no-banner --show-format
@end smallexample 

Or even shorter:
@smallexample
  vcddump -t -f
@end smallexample 

I want to see the filesystem info and track info for the CD
in my default drive

@smallexample
  vcddump --show-tracks --show-filesystem
@end smallexample 

I want to see the filesystem info and track info for the CD
in my default drive

And finally I want to see just the ``data'' part --- that is the list
of the entries section, no summary information like a count or ID tag.
@smallexample
  vcddump --show-entries data
@end smallexample 

@node History and Thanks
@chapter History and Thanks

This program started its life under the name ``vcddebug'' by Herbert
Valerio Riedel. The overall structure is still largely that of this
program. However vcddebug dumps all information about a VCD always.  I
needed to pick out individual pieces of information from this for a a
media player plugin. Initially I was running vcddebug and parsing
output. It became clear that it would be convenient to add options to
reduce the amount of output. Initially there were single options added
such as to show the VCD format. However with the bulk of information
that's that is available, a sub-option system became very useful; that
was added.

I was unhappy about the name ``vcddebug'' since there really was no
debugging involved. Furthermore getting changes back into vcddebug was
going a bit slowly. So @value{program} was started and that allowed me more
freedom to change the program in more drastic ways. In particular, it
was becoming clear to me that what I really needed was a library to
give information about a VCD and much of this code was ``inlined''
inside vcddebug. So I pulled pieces of that out and a library was
created. As a result @value{program} became a test-bed for this library.

In developing my VCD plugin, I used @value{program} quite a bit. One of the
annoying things about vcddebug was it's verbosity in specifying
where to read from; I was constantly typing
``--cdrom-device=/dev/cdrom'' when I felt that the program should be
able to figure this out. The distinction between a ``device'' and a
file containing CD image while it may be fascinating to the program,
was just not of interest to me as a user. So the ability to figure
make what seems to be a reasonable guess about what's being read,
short options for the classes of input and optional names were then
added. 

When my VCD input plugin got good enough to read CD-images from a
file, I realized that in order to recover track information one needs
to consult the CUE file. So the ability to read this kind of file was
added to the library routines, and @value{program} was adjusted
accordingly. Likewise dumping out track information when a image is
not a VCD was added.

@node General Index
@unnumbered General Index
@printindex cp

@node Option Index
@unnumbered Option Index
@printindex ky

@node Sub-Option Index
@unnumbered Sub-Option Index
@printindex fn

@tex
% I think something like @colophon should be in texinfo.  In the
% meantime:
\long\def\colophon{\hbox to0pt{}\vfill
\centerline{The body of this manual is set in}
\centerline{\fontname\tenrm,}
\centerline{with headings in {\bf\fontname\tenbf}}
\centerline{and examples in {\tt\fontname\tentt}.}
\centerline{{\it\fontname\tenit\/},}
\centerline{{\bf\fontname\tenbf}, and}
\centerline{{\sl\fontname\tensl\/}}
\centerline{are used for emphasis.}\vfill}
\page\colophon
% Blame: doc@cygnus.com, 1991.
@end tex

@bye
